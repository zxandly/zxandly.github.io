<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Swagger</title>
      <link href="/2018/08/30/Swagger/"/>
      <url>/2018/08/30/Swagger/</url>
      <content type="html"><![CDATA[<p>Swagger<br><a id="more"></a><br>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前端渲染、前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系变成了API接口，API文档变成了前后端开发人员联系的纽带，swagger就是一款更好地书写API文档的框架。</p><h2 id="其他API文档工具"><a href="#其他API文档工具" class="headerlink" title="其他API文档工具"></a>其他API文档工具</h2><p>没有API文档工具之前，大家都是手写API文档的，有在confluence上写的，有在对应的项目目录下readme.md上写的。</p><p>书写API文档的工具有很多，但是能称之为“框架”的，估计只有Swagger了。<br>在此之前先介绍一款其他的API文档工具，叫rap：解放生产力，代替手写API的web工具。RAP是由阿里开发的，<a href="https://github.com/thx/RAP" target="_blank" rel="noopener">github地址</a>。当然咯，RAP不可能只有线上版本，肯定可以部署到私服上：<a href="https://github.com/thx/RAP/wiki/deploy_manual_cn" target="_blank" rel="noopener">https://github.com/thx/RAP/wiki/deploy_manual_cn</a>.</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>RAP挺好用的，但是和Swagger比起来有点轻量。下图是Swagger的生态使用图<br><img src="/img/Swagger.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>增加代码的灵活性</title>
      <link href="/2018/08/30/%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7/"/>
      <url>/2018/08/30/%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>Lambda表达式 <strong>有利于行为参数化</strong>，可以使用不同的Lambda表达式表示不同的行为，并将它们作为参数传递给函数去处理执行。这种方式<br><a id="more"></a><br>可以帮助我们淡定从容的面对需求的变化。比如，可以用多种方式为Predicate创建筛选条件，或者使用<br>看看有哪些模式可以应用到代码中，享受Lambda表达式带来的便利。</p><h3 id="1-采用函数接口"><a href="#1-采用函数接口" class="headerlink" title="1.采用函数接口"></a>1.采用函数接口</h3><h3 id="2-有条件的延迟执行"><a href="#2-有条件的延迟执行" class="headerlink" title="2.有条件的延迟执行"></a>2.有条件的延迟执行</h3><h3 id="3-环绕执行"><a href="#3-环绕执行" class="headerlink" title="3.环绕执行"></a>3.环绕执行</h3>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从命令式的数据处理切换到Stream</title>
      <link href="/2018/08/29/%E4%BB%8E%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%87%E6%8D%A2%E5%88%B0Stream/"/>
      <url>/2018/08/29/%E4%BB%8E%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%87%E6%8D%A2%E5%88%B0Stream/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>建议将所有使用迭代器这种数据处理模式处理集合的代码都转换为Stream API的方式。为什么呢？<strong>Stream API能更清晰地表达数据处理管道的意图</strong>。除此之外，<strong>通过短路和延迟载入以及利用第7章介绍的现代计算机的多核架构</strong>，我们可以对Stream进行优化。</p><p>比如，下面的命令式代码使用了两种代码：筛选和抽取，<strong>这两种模式被混在了一起，这样的代码结构迫使程序员必须彻底搞清楚程序的每个细节才能理解代码的功能</strong>。此外，实现需要并行运行的程序所面对的困难也多得多：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; dishName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Dish dish : menu) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dish.getCalories() &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        dishNames.add(dish.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>替代方案使用Stream API，<strong>采用这种方式编写的代码读起来更像问题陈述</strong>，并行化也非常容易：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu.parallelStream()</span><br><span class="line">    .filter(d -&gt; d.getCalories &gt; <span class="number">300</span>)</span><br><span class="line">    .map(Dish::getName)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p>不幸的是，将命令式的结构代码转换为Stream API的形式是个困难的任务，因为你需要考虑控制流语句，比如break、continue、return，并选择使用恰当的流操作。好消息是已经有一些工具可以帮助我们完成这个任务。参见<a href="http://refactoring.info/tools/LambdaFicator/" target="_blank" rel="noopener">http://refactoring.info/tools/LambdaFicator/</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java程序员最常犯的10个错误</title>
      <link href="/2018/08/28/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/"/>
      <url>/2018/08/28/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p><a href="http://www.importnew.com/12074.html" target="_blank" rel="noopener">原文</a><br><a href="https://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/" target="_blank" rel="noopener">英文原文</a></p><h2 id="1-将数组转化为列表"><a href="#1-将数组转化为列表" class="headerlink" title="1.将数组转化为列表"></a>1.将数组转化为列表</h2><p>将数组转化为一个列表时，程序员们经常这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure></p><p>Arrays.asList()会返回一个ArrayList对象，这里的ArrayList类是 <strong>java.util.Arrays.ArrayList，是Arrays的一个私有静态类</strong>，而不是java.util.ArrayList类，java.util.Arrays.ArrayList类有set()、get()、contains()方法，但是没有增加元素的方法，所以 <strong>它的大小是固定的</strong>，想要创建一个java.uitl.ArrayList类，应该这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.Arrays.ArrayList 类定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>ArrayList的构造方法可以接受一个集合类型，刚好它也是java.util.Arrays.ArrayList的超类</p><h2 id="2-判断一个数组是否包含一个值"><a href="#2-判断一个数组是否包含一个值" class="headerlink" title="2.判断一个数组是否包含一个值"></a>2.判断一个数组是否包含一个值</h2><p>程序员们经常这样做<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br></pre></td></tr></table></figure></p><p>这段代码起作用，但是没有必要把一个数组转化为列表，转化为列表需要额外的时间。可以像下面这样简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(arr).contains(targetValue);</span><br></pre></td></tr></table></figure></p><p>或者是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s : arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(targetValue)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></p><p>第一种方法比第二种更易读</p><h2 id="3-在一个循环中删除一个列表中的元素"><a href="#3-在一个循环中删除一个列表中的元素" class="headerlink" title="3.在一个循环中删除一个列表中的元素"></a>3.在一个循环中删除一个列表中的元素</h2><p>思考下面这一段在循环中删除多个元素的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></p><p>输出结果是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b, d]</span><br></pre></td></tr></table></figure></p><p>在这个方法中有一个严重的错误，当一个元素被删除时，列表的大小缩小并且下标变化，所以当你想要在一个循环中用下表删除多个元素的时候，它并不会正常的生效。</p><p>你也许知道再循环中正确的删除多个元素的方法是使用迭代，并且知道java中的doreach循环看起来像一个迭代器，但实际上并不是。考虑一下下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">        list.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它会抛出一个ConcurrentModificationException异常</p><p>相反下面的显示正常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    String s = iter.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">        iter.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>next()必须在remove()之前调用。在一个foreach循环中，编译器会使next()在删除元素后被调用，因此就会抛出ConcurrentModificationException异常，你也许希望看一下ArrayList.iterator()的源代码。</p><h2 id="4-Hashtable与HashMap的对比"><a href="#4-Hashtable与HashMap的对比" class="headerlink" title="4.Hashtable与HashMap的对比"></a>4.Hashtable与HashMap的对比</h2><p>就算法而言，哈希表是数据结构的一个名字。但是在java中，这个数据结构的名字是HashMap。Hashtable与HashMap的一个重要不同点是Hashtable是同步的，所以你经常不需要Hashtable，相反Hashmap经常会用到。<br>具体请看</p><ul><li><a href="http://www.importnew.com/8658.html" target="_blank" rel="noopener">HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</a></li><li><a href="https://www.programcreek.com/2013/09/top-9-questions-for-java-map/" target="_blank" rel="noopener">Top 9 questions about Map</a></li></ul><h2 id="5-在集合中使用原始类型"><a href="#5-在集合中使用原始类型" class="headerlink" title="5.在集合中使用原始类型"></a>5.在集合中使用原始类型</h2><p>在Java中原始类型与无界通配符类型很容易混合在一起，拿Set来说，Set是一个原始类型，而Set&lt;?&gt;是无界的通配符类型。<br>考虑下面使用原始类型List作为参数的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span> </span>&#123;</span><br><span class="line">    list.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    add(list, <span class="number">10</span>);</span><br><span class="line">    String s = list.get(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码会抛出一个异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String  </span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure></p><p>使用原生类型结合是很危险的，这是因为原生类型集合跳过了泛型类型的检查，并且是不安全的，在Set、Set&lt;?&gt;和Set<object>中有很大不同，具体请看</object></p><ul><li><a href="https://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/" target="_blank" rel="noopener">Raw type vs. Unbounded wildcard</a></li><li><a href="https://www.programcreek.com/2011/12/java-type-erasure-mechanism-example/" target="_blank" rel="noopener">Type Erasure</a></li></ul><h2 id="6-访问级别"><a href="#6-访问级别" class="headerlink" title="6.访问级别"></a>6.访问级别</h2><p>程序员们经常使用public作为类字段的修饰符，可以很简单的通过引用得到值，但这是一个坏的设计，按照经验，<strong>分配给成员变量的访问界别应该尽可能的低</strong>。<br>具体请看 <a href="https://www.programcreek.com/2011/11/java-access-level-public-protected-private/" target="_blank" rel="noopener">public,protected,private</a></p><h2 id="7-ArrayList与LinkedList的对比"><a href="#7-ArrayList与LinkedList的对比" class="headerlink" title="7.ArrayList与LinkedList的对比"></a>7.ArrayList与LinkedList的对比</h2><p>当程序员们不知道ArrayList和LinkedList的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之间有巨大的性能差异。简而言之，如果有大量的增加删除操作并且没有很多随机访问元素的操作，应该首先LinkedList，如果刚接触它们，请看<a href="https://www.programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/" target="_blank" rel="noopener">ArrayList vs. LinkedList</a>来获得更多关于它们性能的信息</p><h2 id="8-可变与不可变"><a href="#8-可变与不可变" class="headerlink" title="8.可变与不可变"></a>8.可变与不可变</h2><p>不可变对象有许多的有点，比如简单，安全等。但是对于每一个不同的值都需要一个独立的对象，太多的对象可能会造成大量的垃圾回收。当选择可变与不可变时应该有一个平衡。<br><strong>一般的，可变对象用来避免产生大量的中间中对象</strong>。一个经典的例子是连接大量的字符串。如果你使用一个不可变的字符串，你会产生很多需要进行垃圾回收的对象。这很浪费CPU的时间，使用可变对象是正确的解决方案（比如StringBuilder）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">    result += s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有时在某些情况下也是需要可变对象的，比如将可变对象作为参数传入方法，不使用很多语句便可以得到多个结果。另外一个例子是排序和过滤；当然，你可以写一个方法来接收原始的集合，并且返回一个排好序的集合，但是这样对于大的集合就太浪费了。（来自<a href="https://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="noopener">StackOverFlow</a>）</p><h2 id="9-父类与子类构造函数"><a href="#9-父类与子类构造函数" class="headerlink" title="9.父类与子类构造函数"></a>9.父类与子类构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个编译器错误的出现是父类默认的构造方法未定义，在Java中，如果一个类没有定义构造方法，编译器会默认的为这个类添加一个无参的构造方法。如果父类中定义了构造方法，这个例子中是Super(String s)，编译器就不会添加默认的无参构造方法，这就是上面这个父类的情形。子类的构造器，不管是无参还是有参，都会调用父类的无参构造函数。因为编译器试图在子类的两个构造方法中添加Super()方法，但是父类默认的构造方法未定义，编译器就会报出这个错误信息。想要修复这个问题，可以简单的通过</p><ul><li><p>1.在父类中添加一个Super()构造方法，像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Super"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.移除父类自定义的构造方法</p></li><li>3.在子类的构造方法中调用父类的super(value)方法。<br><a href="https://www.programcreek.com/2013/04/what-are-the-frequently-asked-questions-about-constructors-in-java/" target="_blank" rel="noopener">Constructor of Super and Stub</a></li></ul><h2 id="10-使用“”还是构造函数"><a href="#10-使用“”还是构造函数" class="headerlink" title="10.使用“”还是构造函数"></a>10.使用“”还是构造函数</h2><p>有两种方法可以创建字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用字符串</span></span><br><span class="line">String x = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//使用构造器</span></span><br><span class="line">String y = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure></p><p>有什么区别呢？<br>下面的例子会给出一个快速的答案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">//true</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(a == b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>关于它们内存分配的更多信息，请参考<a href="https://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/" target="_blank" rel="noopener">Create Java String Using ” ” or Constructor?</a>。</p>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java只使用try和finally，不使用catch的原因和场景</title>
      <link href="/2018/08/28/Java%E5%8F%AA%E4%BD%BF%E7%94%A8try%E5%92%8Cfinally%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8catch%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%9C%BA%E6%99%AF/"/>
      <url>/2018/08/28/Java%E5%8F%AA%E4%BD%BF%E7%94%A8try%E5%92%8Cfinally%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8catch%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p><a href="https://blog.csdn.net/aitangyong/article/details/38146833?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">原文地址</a></p><p>JDK开发工具包中，很多异常都使用了如下结构，如AbstractExecutorService，即只有try和finally，没有catch<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reentrant英[ri:'entrənt] 美[rɪ'entrənt] 即 en entrant 再进入，可重入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//block until condition holds</span></span><br><span class="line">        lock.lock(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//... methods body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么要使用这种结构呢？有什么好处？先看下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryAndFinally</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//NullPointerException</span></span><br><span class="line">        name.length();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传递null该方法的执行结果是：在控制台打印aa，并抛出NullPointerException。执行流程是先执行try块，出现异常后执行finally块，最后向调用者抛出try中的一场。这种执行结果是很正常的，因为没有catch异常处理器，所以该方法只能将产生的异常向外抛；因为有finally，所以会在方法返回抛出异常前，先执行finally代码块中的清理工作。</p><hr><p>这种做法的好处是什么呢？<br>对于testTryAndFinally来说，它做了自己必须要做的事（finally），并向外抛出自己无法处理的异常；对于调用者来说，能够感知出现的异常，并可以按照需要进行处理。<strong>也就是说这种结构实现了职责的分离，实现了异常处理（throw）与异常清理（finally）的解耦，让不同的方法专注于自己应该做的事。</strong>那什么时候使用try-finally,什么时候使用try-catch-finally呢？很显然这取决于方法本身是否能够处理try中出现的异常。如果自己可以处理，那么直接catch住，不用抛给方法的调用者；如果自己不知道怎么处理，就应该将异常向外抛，能够让调用者知道发生了异常。即在方法的签名中声明throws可能出现而自己又无法处理的异常，但是在方法内部做自己应该做的事情。</p><p>这可以参考ExecutorService.invokeAny()的方法签名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collecion&lt;? extends Callable&lt;T&gt; tasks)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从Lambda 表达式到方法引用的转换</title>
      <link href="/2018/08/27/%E4%BB%8ELambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/08/27/%E4%BB%8ELambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>Lambda非常适用于需要传递代码片段的场景。不过，为了改善代码的可读性，请尽量使用方法引用。<strong>因为方法名往往能更直观地表达代码的意图</strong>。比如下面这段代码，功能是按照食物的热量级别对菜肴进行分类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCaloricLevel = </span><br><span class="line">     menu.stream()</span><br><span class="line">         .collect(</span><br><span class="line">             groupingBy(dish -&gt; &#123;</span><br><span class="line">                 <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">         );</span><br></pre></td></tr></table></figure></p><p>可以将Lambda表达式的内容抽取到一个单独的方法中，将其作为参数传递给groupingBy方法。变换之后，代码变得更加简洁，程序的意图也更加清晰了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCaloricLevel = </span><br><span class="line">     menu.stream().collect(groupingBy(Dish::getCaloricLevel));</span><br></pre></td></tr></table></figure></p><p>为了实现这个方案，还需要在Dish类中添加getCaloricLevel方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; getCaloricLevel() &#123;</span><br><span class="line">        <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，应该尽量考虑使用静态辅助方法，比如comparing、maxBy。这些方法设计之初就考虑了会结合方法引用一起使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要考虑如何实现比较算法</span></span><br><span class="line">inventory.sort(</span><br><span class="line">    (Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读起来就像问题描述，非常清晰</span></span><br><span class="line">inventory.sort(comparing(Apple::getWeight));</span><br></pre></td></tr></table></figure></p><p>此外，很多通用的归约操作，比如sum、maximum,都有内建的辅助方法可以和方法引用结合使用。比如，使用Collectors接口可以轻松得到<em>和</em>或者<em>最大值</em>，与采用Lambda表达式和底层的归约操作比起来，这种方式要 <strong>直观的多</strong>。与其编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = </span><br><span class="line">    menu.stream().map(Dish::getCalories)</span><br><span class="line">                 .reduce(<span class="number">0</span>, (c1, c2) -&gt; c1 + c2);</span><br></pre></td></tr></table></figure></p><p>不如尝试使用内置的集合类，它能更清晰地表达问题陈述是什么。下面的代码中，我们使用了集合类summingInt（方法的名词很直观地解释了它的功能）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = menu.stream().collect(summingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从匿名类到Lambda表达式的转换</title>
      <link href="/2018/08/27/%E4%BB%8E%E5%8C%BF%E5%90%8D%E7%B1%BB%E5%88%B0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/08/27/%E4%BB%8E%E5%8C%BF%E5%90%8D%E7%B1%BB%E5%88%B0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>值得尝试的第一种重构，也是简单的方式，是将实现单一抽象方法的匿名类转换为Lambda表达式。比如，创建一个Runnable对象的匿名类，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的Lambda表达式实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r2 = () -&gt; System.out.println(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p><p>但是某些情况下，将匿名类转换为Lambda表达式可能是一个比较复杂的过程。</p><ul><li>首先，匿名类和Lambda表达式中<strong>this</strong>和<strong>super</strong>的含义是不同的。在匿名类中，this代表的是<strong>类自身</strong>，但是在Lambda中，它代表的是<strong>包含类</strong>。</li><li>其次，匿名类可以屏蔽包含类的变量，而Lambda表达式不能（它们会导致编译错误），譬如下面这段代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译错误</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">Runnable r1 = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>错误信息<br><em>Error:(8, 17) java: 已在方法 main(java.lang.String[])中定义了变量 a</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一切正常</span></span><br><span class="line">Runnable r2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后，在涉及重载的上下文里，将匿名类转换为Lambda表达式可能导致最终的代码更加晦涩。实际上，匿名类的类型是在初始化时确定的，而Lambda的类型取决于它的上下文。通过下面这个例子，可以了解问题是如何发生的。假设用Runnable同样的签名声明了一个函数接口Task：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    r.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Task a)</span> </span>&#123;</span><br><span class="line">    a.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>现在，你再传递一个匿名类实现的Task，不会碰到了任何问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doSomething(<span class="keyword">new</span> Task() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Danger"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是将这种匿名类转换为Lambda表达式时，就导致了一种晦涩的方法调用，因为Runnable和Task都是合法的目标类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething(() -&gt; System.out.println(<span class="string">"Danger"</span>));</span><br></pre></td></tr></table></figure></p><p>错误信息<br><em>Error:(12, 9) java: 对doSomething的引用不明确 Test 中的方法 doSomething(java.lang.Runnable) 和 Test 中的方法 doSomething(Task) 都匹配</em></p><p>可以对Task尝试使用显式的类型转换来解决这种模棱两可的情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething((Task)() -&gt; System.out.println(<span class="string">"Danger"</span>));</span><br></pre></td></tr></table></figure></p><p>但是不要因此而放弃对Lambda的尝试。好消息是，目前大多数的集成开发环境，比如NetBeans和Intellij都支持这种重构，它们可以自动帮你检查，避免发生这些问题。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mastering_Go笔记二</title>
      <link href="/2018/08/26/Mastering-Go%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2018/08/26/Mastering-Go%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="Mastering-Go笔记二"><a href="#Mastering-Go笔记二" class="headerlink" title="Mastering_Go笔记二"></a>Mastering_Go笔记二</h2><a id="more"></a><p>本文主要通过 <code>Masting Go</code> 一书第二章学习Go语言底层知识和一些黑魔法。</p><p>Go语言指针，不能随意转换类型:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value <span class="keyword">int64</span> = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> p1 = &amp;value</span><br><span class="line">    <span class="keyword">var</span> p2 = (*<span class="keyword">int32</span>)(unsafe.Pointer(p1))  <span class="comment">// a 32-bit pointer cannot store a 64-bit integer</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"*p1: "</span>, *p1)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line"></span><br><span class="line">    *p1 = <span class="number">5434123412312431212</span></span><br><span class="line">    fmt.Println(value)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line">    *p1 = <span class="number">54341234</span></span><br><span class="line">    fmt.Println(value)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>go tool compile</code> 可以把源码编译为目标代码 使用 <code>-pack</code> 归档, <code>-race</code> 检测是否有竞态条件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go tool compile -race -pack unsafe.go &amp;&amp; file ./unsafe.a</span><br><span class="line">./unsafe.a: current ar archive</span><br><span class="line"></span><br><span class="line">λ ar -t unsafe.a</span><br><span class="line">__.PKGDEF</span><br><span class="line">_go_.o</span><br></pre></td></tr></table></figure><p>使用 <code>go tool compile -S temp.go</code> 可以得到很多的类似汇编语言的代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">λ <span class="keyword">go</span> tool compile -S temp.<span class="keyword">go</span> </span><br><span class="line"><span class="string">""</span>.main STEXT size=<span class="number">110</span> args=<span class="number">0x0</span> locals=<span class="number">0x48</span></span><br><span class="line">    <span class="number">0x0000</span> <span class="number">00000</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    TEXT    <span class="string">""</span>.main(SB), $<span class="number">72</span><span class="number">-0</span></span><br><span class="line">    <span class="number">0x0000</span> <span class="number">00000</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    MOVQ    (TLS), CX</span><br><span class="line">    <span class="number">0x0009</span> <span class="number">00009</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    CMPQ    SP, <span class="number">16</span>(CX)</span><br><span class="line">    <span class="number">0x000d</span> <span class="number">00013</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    JLS <span class="number">103</span></span><br><span class="line">    <span class="number">0x000f</span> <span class="number">00015</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    SUBQ    $<span class="number">72</span>, SP</span><br><span class="line">    <span class="number">0x0013</span> <span class="number">00019</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    MOVQ    BP, <span class="number">64</span>(SP)</span><br><span class="line">    <span class="number">0x0018</span> <span class="number">00024</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    LEAQ    <span class="number">64</span>(SP), BP</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    FUNCDATA    $<span class="number">0</span>, gclocals·<span class="number">69</span>c1753bd5f81501d95132d08af04464(SB)</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    FUNCDATA    $<span class="number">1</span>, gclocals·e226d4ae4a7cad8835311c6a4683c14f(SB)</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   XORPS   X0, X0</span><br><span class="line">    <span class="number">0x0020</span> <span class="number">00032</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   MOVUPS  X0, <span class="string">""</span>..autotmp_0+<span class="number">48</span>(SP)</span><br><span class="line">    <span class="number">0x0025</span> <span class="number">00037</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   LEAQ    <span class="keyword">type</span>.<span class="keyword">string</span>(SB), AX</span><br><span class="line">    <span class="number">0x002c</span> <span class="number">00044</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   MOVQ    AX, <span class="string">""</span>..autotmp_0+<span class="number">48</span>(SP)</span><br></pre></td></tr></table></figure><p>Go语言GC是和进程一起运行的，用来释放不再需要的内存资源，使用以下代码查看内存使用和GC次数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMemStats</span><span class="params">(mem runtime.MemStats)</span></span> &#123;</span><br><span class="line">    runtime.ReadMemStats(&amp;mem)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"mem.Alloc:"</span>, mem.Alloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.TotalAlloc:"</span>, mem.TotalAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.HeapAlloc:"</span>, mem.HeapAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.NumGC:"</span>, mem.NumGC)</span><br><span class="line">    fmt.Println(<span class="string">"-----"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mem runtime.MemStats</span><br><span class="line">    printMemStats(mem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">50000000</span>)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Operation failed!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">        printMemStats(mem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMemStats(mem)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mem.Alloc: 67336</span><br><span class="line">mem.TotalAlloc: 67336</span><br><span class="line">mem.HeapAlloc: 67336</span><br><span class="line">mem.NumGC: 0</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 70792</span><br><span class="line">mem.TotalAlloc: 50077928</span><br><span class="line">mem.HeapAlloc: 70792</span><br><span class="line">mem.NumGC: 1</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71120</span><br><span class="line">mem.TotalAlloc: 100083080</span><br><span class="line">mem.HeapAlloc: 71120</span><br><span class="line">mem.NumGC: 2</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71576</span><br><span class="line">mem.TotalAlloc: 150088296</span><br><span class="line">mem.HeapAlloc: 71576</span><br><span class="line">mem.NumGC: 3</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71576</span><br><span class="line">mem.TotalAlloc: 200093056</span><br><span class="line">mem.HeapAlloc: 71576</span><br><span class="line">mem.NumGC: 4</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>GODEBUG=gctrace=1 go run temp.go</code> 可以看到GC过程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">λ GODEBUG=gctrace=1 go run temp.go</span><br><span class="line">gc 1 @0.141s 0%: 0.017+0.67+0.066 ms clock, 0.068+0.23/0.51/0.91+0.26 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 2 @0.279s 0%: 0.008+0.50+0.032 ms clock, 0.033+0.40/0.36/0.93+0.12 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 3 @0.449s 0%: 0.077+1.6+0.15 ms clock, 0.30+0.40/1.5/0.36+0.60 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 4 @0.457s 0%: 0.005+1.1+0.055 ms clock, 0.022+0.30/0.87/0.72+0.22 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 5 @0.488s 0%: 0.008+1.9+0.10 ms clock, 0.034+0.16/1.7/0.62+0.42 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 6 @0.511s 0%: 0.006+0.71+0.033 ms clock, 0.026+0.30/0.56/1.3+0.13 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">gc 1 @0.026s 0%: 0.020+4.2+0.11 ms clock, 0.080+1.1/3.6/4.7+0.47 ms cpu, 4-&gt;4-&gt;3 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">gc 1 @0.003s 0%: 0.025+20+0.24 ms clock, 0.10+2.3/1.8/0.31+0.98 ms cpu, 4-&gt;5-&gt;5 MB, 5 MB goal, 4 P</span><br><span class="line">gc 2 @0.036s 0%: 0.007+6.6+0.065 ms clock, 0.031+0.12/6.4/0.60+0.26 ms cpu, 7-&gt;8-&gt;8 MB, 10 MB goal, 4 P</span><br><span class="line">gc 3 @0.073s 0%: 0.014+7.7+0.047 ms clock, 0.059+0.15/7.2/11+0.18 ms cpu, 13-&gt;14-&gt;13 MB, 16 MB goal, 4 P</span><br><span class="line">gc 4 @0.159s 0%: 0.010+31+0.10 ms clock, 0.041+1.0/28/0.81+0.42 ms cpu, 24-&gt;26-&gt;24 MB, 26 MB goal, 4 P</span><br><span class="line">mem.Alloc: 67496</span><br><span class="line">mem.TotalAlloc: 67496</span><br><span class="line">mem.HeapAlloc: 67496</span><br><span class="line">mem.NumGC: 0</span><br><span class="line">-----</span><br><span class="line">gc 1 @0.003s 0%: 0.008+0.13+0.15 ms clock, 0.032+0.081/0/0.19+0.63 ms cpu, 47-&gt;47-&gt;0 MB, 48 MB goal, 4 P</span><br><span class="line">mem.Alloc: 68968</span><br><span class="line">mem.TotalAlloc: 50076296</span><br><span class="line">mem.HeapAlloc: 68968</span><br><span class="line">mem.NumGC: 1</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>三色算法简介:</p><p>三色算法原理是把对象分为三个集合，黑白灰三个颜色，每个对象只能属于一个集合。</p><blockquote><p>The objects of the black set are<br>guaranteed to have no pointers to any object of the white set. However, an object in the<br>white set can have a pointer to an object of the black set, because this has no effect on the<br>operation of the garbage collector! The objects of the grey set might have pointers to some<br>objects of the white set. Also, the objects of the white set are candidates for garbage<br>collection.</p></blockquote><p>黑色集合的对象保证不会指向白色集合对象。白色集合的对象可以指向黑色集合（从黑色集合引用的），因为对GC没有影响。<br>灰色集合的对象可以被白色集合里对象引用。白色集合里的对象就是GC的候选对象。也就是说，白色集合里的都是引用别人的，<br>黑色集合里的不会引用白色集合的，灰色集合里的可以被白色集合里的引用。</p><blockquote><p>Note that no object can go directly from the black set to the white set, which allows the<br>algorithm to operate and be able to clear the objects in the white set. Additionally, no object<br>of the black set can directly point to an object of the white set.</p></blockquote><blockquote><p>When the garbage collection begins, all objects are white and the garbage collector visits all<br>of the root objects and colors them grey. The roots are the objects that can be directly<br>accessed by the application, which includes global variables and other things on the stack.<br>After this, the garbage<br>collector picks a grey object, makes it black, and starts searching to determine if that object<br>has pointers to other objects of the white set. This means that when a grey object is being<br>scanned for pointers to other objects, it is colored black. If that scan discovers that this<br>particular object has one or more pointers to a white object, it puts that white object in the<br>grey set. This process keeps going for as long as objects exist in the grey set. After that, the<br>objects in the white set are unreachable and their memory space can be reused. Therefore, at<br>this point, the elements of the white set are said to be garbage collected.</p></blockquote><p>GC开始时，所有对象都放白色集合里，然后垃圾回收器会遍历所有根对象并把他们标记灰色。跟节点对象是可以直接被应用访问的，<br>包括全局变量和栈上的对象。</p><p>Go的GC也能用在 <code>channel</code> 上:</p><blockquote><p>The Go garbage collection can also be applied to variables such as channels! When the<br>garbage collector finds out that a channel is unreachable and that the channel variable can<br>no longer be accessed, it will free its resources even if the channel has not been closed!</p></blockquote><p>Go语言允许手动GC, 但是 <code>runtime.GC()</code> 的调用是同步的，会阻塞整个进程:</p><blockquote><p>Go allows you to initiate a garbage collection manually by putting a runtime.GC()<br>statement in your Go code. However, keep in mind that runtime.GC() will block the<br>caller, and it might block the entire program, especially if you are running a very busy Go<br>program with many objects. </p></blockquote><p>另一个使用 <code>unsafe</code> 的例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    pointer := &amp;array[<span class="number">0</span>]</span><br><span class="line">    fmt.Print(*pointer, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    memaddr := <span class="keyword">uintptr</span>(unsafe.Pointer(pointer)) + unsafe.Sizeof(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 也可以越界访问</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line">        pointer = (*<span class="keyword">int</span>)(unsafe.Pointer(memaddr))</span><br><span class="line">        fmt.Print(*pointer, <span class="string">"\n"</span>)</span><br><span class="line">        memaddr = <span class="keyword">uintptr</span>(unsafe.Pointer(pointer)) + unsafe.Sizeof(array[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言内联C语言实例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//必须不留空行</span></span><br><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">// void callC() &#123;</span></span><br><span class="line"><span class="comment">//   int i;</span></span><br><span class="line"><span class="comment">//   for (i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//     printf("Calling C code!\n");</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   exit(0); // 如果C代码退出的话，Go进程也会退出</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A Go statement!"</span>)</span><br><span class="line">    C.callC()</span><br><span class="line">    fmt.Println(<span class="string">"Nerver execute statement!"</span>)  <span class="comment">//这句不会执行了 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Go语言调用C语言，多个文件实例:</p><p>hello/hello.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cHello</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">char</span>* message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>hello/hello.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello from C!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Go send me %s\n"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hello1.go 和 hello 文件夹在一个目录下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// #cgo CFLAGS: -I$&#123;SRCDIR&#125;/hellolib</span></span><br><span class="line"><span class="comment">// #cgo LDFLAGS: $&#123;SRCDIR&#125;/hello.a</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">// #include "hello.h" // hello.h 文件需要和 hello1.go放在一个文件夹下面，需要把hello.h复制出来</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Going to call a C function!"</span>)</span><br><span class="line">    C.cHello()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Going to call another C function!"</span>)</span><br><span class="line">    <span class="comment">// CString 是给C的参数必备的</span></span><br><span class="line">    myMessage := C.CString(<span class="string">"This is Mihalis!"</span>)</span><br><span class="line">    <span class="keyword">defer</span> C.free(unsafe.Pointer(myMessage))</span><br><span class="line">    C.printMessage(myMessage)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"All perfectly done!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并打包 hello 的静态库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ gcc -c hello/*.c</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ ar rs hello.a hello.o</span><br><span class="line">ar: creating archive helloC.a</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ file hello.a</span><br><span class="line">helloC.a: current ar archive random library</span><br></pre></td></tr></table></figure><p>构建 <code>hello1.go</code> 并运行 hello1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo λ go build hello1.go</span><br><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo λ ./hello1 </span><br><span class="line">Going to call a C function!</span><br><span class="line">Hello from C!</span><br><span class="line">Going to call another C function!</span><br><span class="line">Go send me This is Mihalis!</span><br><span class="line">All perfectly done!</span><br></pre></td></tr></table></figure><p>从C语言调用Go的函数:</p><blockquote><p>The Go package<br>will be converted into a C shared library that will be used in the C program.</p></blockquote><p>把Go语言的包转为C语言的共享库，然后被C语言调用。</p><p>usedByC.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export PrintMessage</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintMessage</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A Go function!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export Multiply</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Multiply</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> build -o usedByC.o -buildmode=c-shared usedByC.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">$ ll</span><br><span class="line">总用量 <span class="number">2.3</span>M</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant  <span class="number">214</span> <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.<span class="keyword">go</span></span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant <span class="number">1.4</span>K <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.h</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant <span class="number">2.3</span>M <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.o</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> vagrant vagrant <span class="number">7.2</span>K <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">13</span> willusego</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant  <span class="number">332</span> <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">13</span> willusego.c</span><br></pre></td></tr></table></figure><p>C语言调用文件:</p><p>willusego.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usedByC.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    GoInt x = <span class="number">12</span>;</span><br><span class="line">    GoInt y = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"About to call a Go function!\n"</span>);</span><br><span class="line">    PrintMessage();</span><br><span class="line"></span><br><span class="line">    GoInt sum = Multiply(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Multiply of %d %d is %d \n"</span>, (<span class="keyword">int</span>)x, (<span class="keyword">int</span>)y, (<span class="keyword">int</span>)sum);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译C语言代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o willusego willusego.c ./usedByC.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># vagrant @ chenwen in ~/temp [13:16:12] </span></span><br><span class="line">$ ./willusego </span><br><span class="line">About to call a Go <span class="keyword">function</span>!</span><br><span class="line">A Go <span class="keyword">function</span>!</span><br><span class="line">Multiply of 12 22 is 264</span><br></pre></td></tr></table></figure><p>练习1:</p><blockquote><p>Write a Go function, and use it in a C program.</p></blockquote><p>以这个问题为例: <a href="https://leetcode.com/problems/length-of-last-word/description/" target="_blank" rel="noopener">https://leetcode.com/problems/length-of-last-word/description/</a></p><p>用C语言写可能比较麻烦，那么用Go写完，让C语言调用它:</p><p>usedByC.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export LengthOfLastWord</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LengthOfLastWord</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    words := strings.Split(strings.TrimSpace(s), <span class="string">" "</span>)</span><br><span class="line">    length := <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(words[length - <span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo/temp λ <span class="keyword">go</span> build -o usedByC.o -buildmode=c-shared usedByC.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>willusego.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usedByC.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cvalue[] = <span class="string">"Hello This is a C Application"</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(cvalue);</span><br><span class="line"></span><br><span class="line">    GoString value = &#123;cvalue, length&#125;;  <span class="comment">//go中的字符串类型在c中为GoString</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max length word length is %d\n"</span>, (<span class="keyword">int</span>)LengthOfLastWord(value));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo/temp λ gcc -o willusego willusego.c  ./usedByC.o           </span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo/temp λ ./willusego </span><br><span class="line">max length word length is 11</span><br></pre></td></tr></table></figure><p><code>defer</code> 关键字</p><blockquote><p>The defer keyword postpones the execution of a function until the surrounding function<br>returns. It is widely used in file input and output operations because it saves you from<br>having to remember when to close an opened file: the defer keyword allows you to put the<br>function call that closes an opened file near to the function call that opened it.</p></blockquote><blockquote><p>It is very important to remember that deferred functions are executed in Last In First Out<br>(LIFO) order after the return of the surrounding function. Put simply, this means that if you<br>defer function f1() first, function f2() second, and function f3() third in the same<br>surrounding function, when the surrounding function is about to return, function f3() will<br>be executed first, function f2() will be executed second, and function f1() will be the last<br>one to get executed.</p></blockquote><p><code>defer</code> 的语句多数用于资源管理，在函数返回前执行，和栈类似，先进后出，最后放进去的先执行。</p><p>实例代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 从  3 - 0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Print(<span class="string">"f1:"</span>, i, <span class="string">" "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// defer 一个无参数的匿名函数, 相当于一个空循环 最后执行defer时候 i=4</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                fmt.Print(<span class="string">"f2:"</span>, i, <span class="string">" "</span>)</span><br><span class="line">            &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 有参数的匿名函数 结果正常 从 1 - 4</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">4</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Print(<span class="string">"f3:"</span>, n, <span class="string">" "</span>)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    fmt.Println()</span><br><span class="line">    f3()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Panic and Recover 关键字</p><p>说明:</p><blockquote><p>Strictly speaking, panic() is a built-in Go function that terminates the current flow of a Go<br>program and starts panicking! On the other hand, the recover() function, which is also a<br>built-in Go function, allows you to take back the control of a goroutine that just panicked<br>using panic().</p></blockquote><p>只有 <code>panic</code> 语句,会让程序直接退出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"I have to leave."</span>)</span><br><span class="line">    fmt.Println(<span class="string">"never execute here!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">λ go run temp.go        </span><br><span class="line">panic: I have to leave.</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">    /Users/leeyang/Downloads/阅读计划/MasteringGo/temp.go:8 +0x39</span><br><span class="line"><span class="built_in">exit</span> status 2</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ</span><br></pre></td></tr></table></figure><p><code>panic</code> 和 <code>recover</code> 一起使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Inside a()"</span>)</span><br><span class="line">    <span class="comment">// 相当于捕获了 b 抛出的异常</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> c := <span class="built_in">recover</span>(); c != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Recover inside a()!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"About to call b()"</span>)</span><br><span class="line">    b()</span><br><span class="line">    fmt.Println(<span class="string">"b() exited!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Exiting a()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Inside b()"</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Panic in b()!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Exiting b()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a()</span><br><span class="line">    fmt.Println(<span class="string">"main exit."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strace -c</code> 可以统计每个系统调用的次数等:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ strace -c ls</span><br><span class="line">usedByC.go  usedByC.h  usedByC.o  willusego  willusego.c</span><br><span class="line">% time     seconds  usecs/call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line"> 50.00    0.000022           2        12           open</span><br><span class="line"> 50.00    0.000022           1        16           mprotect</span><br><span class="line">  0.00    0.000000           0        10           <span class="built_in">read</span></span><br><span class="line">  0.00    0.000000           0         1           write</span><br><span class="line">  0.00    0.000000           0        14           close</span><br><span class="line">  0.00    0.000000           0        12           fstat</span><br><span class="line">  0.00    0.000000           0        28           mmap</span><br><span class="line">  0.00    0.000000           0         3           munmap</span><br><span class="line">  0.00    0.000000           0         3           brk</span><br><span class="line">  0.00    0.000000           0         2           rt_sigaction</span><br><span class="line">  0.00    0.000000           0         1           rt_sigprocmask</span><br><span class="line">  0.00    0.000000           0         2           ioctl</span><br><span class="line">  0.00    0.000000           0         1         1 access</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           fcntl</span><br><span class="line">  0.00    0.000000           0         2           getdents</span><br><span class="line">  0.00    0.000000           0         1           getrlimit</span><br><span class="line">  0.00    0.000000           0         1           statfs</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">  0.00    0.000000           0         2         1 futex</span><br><span class="line">  0.00    0.000000           0         1           set_tid_address</span><br><span class="line">  0.00    0.000000           0         1           set_robust_list</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000044                   116         2 total</span><br></pre></td></tr></table></figure><p><code>runtime</code> 包获取系统相关信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">"You are using "</span>, runtime.Compiler, <span class="string">" "</span>)</span><br><span class="line">    fmt.Println(<span class="string">"on a"</span>, runtime.GOARCH, <span class="string">"machine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Using Go version"</span>, runtime.Version())</span><br><span class="line">    fmt.Println(<span class="string">"Number of CPUs:"</span>, runtime.NumCPU())</span><br><span class="line">    fmt.Println(<span class="string">"Number of Goroutines:"</span>, runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go</span><br><span class="line">You are using gc on a amd64 machine</span><br><span class="line">Using Go version go1.10.3</span><br><span class="line">Number of CPUs: 4</span><br><span class="line">Number of Goroutines: 1</span><br></pre></td></tr></table></figure><p><code>Node Trees</code> 简介:</p><blockquote><p>A Go node is a struct with a large number of properties.Everything in a<br>Go program is being parsed and analyzed by the modules of the Go compiler according to<br>the grammar of the Go programming language. The final product of this analysis is a tree<br>that is specific to the provided Go code, and it represents the program in a different way<br>that is suited for the compiler rather than for the developer.</p></blockquote><p>使用 <code>$ go tool compile -W temp.go</code> 可以得到很多关于node的属性</p><p>使用这个工具可以对代码进行一些分析:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> λ go tool compile -W temp.go | grep functionOne</span><br><span class="line">before functionOne</span><br><span class="line">after walk functionOne</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br></pre></td></tr></table></figure><p><code>runtime.Breakpoint</code> 可以加断点:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionOne</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    varOne := <span class="number">7788</span></span><br><span class="line">    varTwo := <span class="number">6699</span></span><br><span class="line">    fmt.Println(<span class="string">"Hello there!"</span>)</span><br><span class="line">    runtime.Breakpoint()</span><br><span class="line">    functionOne(varOne)</span><br><span class="line">    functionOne(varTwo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://karthikkaranth.me/blog/calling-c-code-from-go/" target="_blank" rel="noopener">https://karthikkaranth.me/blog/calling-c-code-from-go/</a><br><a href="https://tonybai.com/2012/09/26/interoperability-between-go-and-c/" target="_blank" rel="noopener">https://tonybai.com/2012/09/26/interoperability-between-go-and-c/</a><br><a href="http://bastengao.com/blog/2017/12/go-cgo-c.html" target="_blank" rel="noopener">http://bastengao.com/blog/2017/12/go-cgo-c.html</a><br><a href="http://fallthrough.io/blog/" target="_blank" rel="noopener">http://fallthrough.io/blog/</a><br><a href="https://www.cnblogs.com/magicsoar/p/7002467.html" target="_blank" rel="noopener">https://www.cnblogs.com/magicsoar/p/7002467.html</a><br><a href="https://golang.org/pkg/runtime/" target="_blank" rel="noopener">https://golang.org/pkg/runtime/</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言安装第三方包问题 and gore 使用</title>
      <link href="/2018/08/22/Go%E8%AF%AD%E8%A8%80%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E9%97%AE%E9%A2%98-and-gore-%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/22/Go%E8%AF%AD%E8%A8%80%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E9%97%AE%E9%A2%98-and-gore-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Go语言安装第三方包问题-and-gore-使用"><a href="#Go语言安装第三方包问题-and-gore-使用" class="headerlink" title="Go语言安装第三方包问题 and gore 使用"></a>Go语言安装第三方包问题 and gore 使用</h2><a id="more"></a><p>Go语言安装第三方包问题 and gore 使用</p><p><code>go get</code> 感觉类似于 <code>pip</code> 可以方便的安装各种库。</p><p>Go语言默认没有提供REPL环境，对初学者不是很方便。</p><p>我需要安装一个 Go 的 REPL 环境 <a href="https://github.com/motemen/gore" target="_blank" rel="noopener">gore</a>, 遇到一个问题,</p><p>网络问题导致的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fetching https://golang.org/x/tools/go/ast/astutil?go-get=1</span><br><span class="line">https fetch failed: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 64.233.162.84:443: i/o timeout</span><br><span class="line">package golang.org/x/tools/go/ast/astutil: unrecognized import path &quot;golang.org/x/tools/go/ast/astutil&quot; (https fetch: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 64.233.162.84:443: i/o timeout)</span><br></pre></td></tr></table></figure><p>如何解决?</p><p>类似于 Python 把源码下载下来安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/golang.org/tools/</span><br><span class="line">cd $GOPATH/src/golang.org/tools/</span><br><span class="line">git clone https://github.com/golang/tools.git tools</span><br></pre></td></tr></table></figure><p>然后再使用 <code>go get</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">λ go get -v github.com/motemen/gore</span><br><span class="line"></span><br><span class="line">github.com/mattn/go-runewidth</span><br><span class="line">github.com/mitchellh/go-homedir</span><br><span class="line">golang.org/x/tools/go/ast/astutil</span><br><span class="line">github.com/motemen/gore/gocode</span><br><span class="line">golang.org/x/tools/internal/fastwalk</span><br><span class="line">github.com/peterh/liner</span><br><span class="line">github.com/motemen/go-quickfix</span><br><span class="line">golang.org/x/tools/imports</span><br><span class="line">github.com/motemen/gore</span><br></pre></td></tr></table></figure><p>对于 <code>gore</code> 使用, 先配置一个 <code>alias</code>:</p><p><code>.zshrc</code> 加入一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias goo=&quot;/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore&quot;</span><br></pre></td></tr></table></figure><p><code>source</code> 一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><p>使用 <code>goo</code> 进入 <code>gore</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">λ goo     </span><br><span class="line">gore version 0.3.0  :help for help</span><br><span class="line">gore&gt; :import os</span><br><span class="line">gore&gt; :doc os</span><br><span class="line">use &apos;godoc cmd/os&apos; for documentation on the os command </span><br><span class="line"></span><br><span class="line">PACKAGE DOCUMENTATION</span><br><span class="line"></span><br><span class="line">package os</span><br><span class="line">    import &quot;os&quot;</span><br><span class="line"></span><br><span class="line">    Package os provides a platform-independent interface to operating system</span><br><span class="line">    functionality. The design is Unix-like, although the error handling is</span><br><span class="line">    Go-like; failing calls return values of type error rather than error</span><br><span class="line">    numbers. Often, more information is available within the error. For</span><br><span class="line">    example, if a call that takes a file name fails, such as Open or Stat,</span><br><span class="line">    the error will include the failing file name when printed and will be of</span><br><span class="line">    type *PathError, which may be unpacked for more information.</span><br><span class="line"></span><br><span class="line">    The os interface is intended to be uniform across all operating systems.</span><br><span class="line">    Features not generally available appear in the system-specific package</span><br><span class="line">    syscall.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">gore&gt; alist := os.Environ()</span><br><span class="line">[]string&#123;&quot;TERM_PROGRAM=Apple_Terminal&quot;, &quot;SHELL=/bin/zsh&quot;, &quot;TERM=xterm-256color&quot;, &quot;TMPDIR=/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/&quot;, &quot;Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHsE3Wj8NL/Render&quot;, &quot;TERM_PROGRAM_VERSION=343.7&quot;, &quot;TERM_SESSION_ID=B6E4BDF5-EB0D-4135-8750-BACC53EA7516&quot;, &quot;USER=leeyang&quot;, &quot;SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.pVg6UGIini/Listeners&quot;, &quot;__CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34&quot;, &quot;PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin&quot;, &quot;PWD=/Users/leeyang&quot;, &quot;LANG=zh_CN.UTF-8&quot;, &quot;XPC_FLAGS=0x0&quot;, &quot;XPC_SERVICE_NAME=0&quot;, &quot;SHLVL=1&quot;, &quot;HOME=/Users/leeyang&quot;, &quot;LOGNAME=leeyang&quot;, &quot;DISPLAY=/private/tmp/com.apple.launchd.82drrxSY7W/org.macosforge.xquartz:0&quot;, &quot;OLDPWD=/Users/leeyang/Desktop&quot;, &quot;ZSH=/Users/leeyang/.oh-my-zsh&quot;, &quot;PAGER=less&quot;, &quot;LESS=-R&quot;, &quot;LC_CTYPE=zh_CN.UTF-8&quot;, &quot;LSCOLORS=Gxfxcxdxbxegedabagacad&quot;, &quot;vcs_info_msg_0_=&quot;, &quot;vcs_info_msg_1_=&quot;, &quot;_=/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore&quot;&#125;</span><br><span class="line"></span><br><span class="line">gore&gt; for index, s := range alist &#123;</span><br><span class="line">.....     fmt.Println(index, s)</span><br><span class="line">..... &#125;</span><br><span class="line"></span><br><span class="line">0 TERM_PROGRAM=Apple_Terminal</span><br><span class="line">1 SHELL=/bin/zsh</span><br><span class="line">2 TERM=xterm-256color</span><br><span class="line">3 TMPDIR=/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/</span><br><span class="line">4 Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHsE3Wj8NL/Render</span><br><span class="line">5 TERM_PROGRAM_VERSION=343.7</span><br><span class="line">6 TERM_SESSION_ID=B6E4BDF5-EB0D-4135-8750-BACC53EA7516</span><br><span class="line">7 USER=leeyang</span><br><span class="line">8 SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.pVg6UGIini/Listeners</span><br><span class="line">9 __CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34</span><br><span class="line">10 PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin</span><br><span class="line">11 PWD=/Users/leeyang</span><br><span class="line">12 LANG=zh_CN.UTF-8</span><br><span class="line">13 XPC_FLAGS=0x0</span><br><span class="line">14 XPC_SERVICE_NAME=0</span><br><span class="line">15 SHLVL=1</span><br><span class="line">16 HOME=/Users/leeyang</span><br><span class="line">17 LOGNAME=leeyang</span><br><span class="line">18 DISPLAY=/private/tmp/com.apple.launchd.82drrxSY7W/org.macosforge.xquartz:0</span><br><span class="line">19 OLDPWD=/Users/leeyang/Desktop</span><br><span class="line">20 ZSH=/Users/leeyang/.oh-my-zsh</span><br><span class="line">21 PAGER=less</span><br><span class="line">22 LESS=-R</span><br><span class="line">23 LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">24 LSCOLORS=Gxfxcxdxbxegedabagacad</span><br><span class="line">25 vcs_info_msg_0_=</span><br><span class="line">26 vcs_info_msg_1_=</span><br><span class="line">27 _=/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore</span><br><span class="line"></span><br><span class="line">gore&gt; :print</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func __gore_p(xx ...interface&#123;&#125;) &#123;</span><br><span class="line">    for _, x := range xx &#123;</span><br><span class="line">        fmt.Printf(&quot;%#v\n&quot;, x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">    alist := os.Environ()</span><br><span class="line">    for index, s := range alist &#123;</span><br><span class="line">        fmt.Println(index, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:doc name</code> 可以得到name包的文档<br><code>:print</code> 可以把输入的命令整理为代码<br><code>:write filename</code> 可以把输入的代码直接写入到filename文件中</p><p>对于安装 <code>goquery</code> 时候也有这个问题。</p><p>通过 如下方法解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ mkdir -p $GOPATH/src/golang.org/x/</span><br><span class="line">λ cd $GOPATH/src/golang.org/x/</span><br><span class="line">λ git clone https://github.com/golang/net.git net </span><br><span class="line">λ go install net</span><br></pre></td></tr></table></figure><p>需要多一步 <code>go install net</code>。</p><p>参考:<br><a href="https://blog.csdn.net/CSXIAOYAOJIANXIAN/article/details/71700736" target="_blank" rel="noopener">https://blog.csdn.net/CSXIAOYAOJIANXIAN/article/details/71700736</a><br><a href="https://github.com/motemen/gore" target="_blank" rel="noopener">https://github.com/motemen/gore</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mastering_Go笔记一</title>
      <link href="/2018/08/22/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/08/22/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="Mastering-Go笔记一"><a href="#Mastering-Go笔记一" class="headerlink" title="Mastering_Go笔记一"></a>Mastering_Go笔记一</h2><a id="more"></a><p>本文主要通过 <code>Mastering Go</code> 一书第一章学习Go语言hello world等程序代码。</p><p>查看版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version go1.10.3 darwin/amd64</span><br></pre></td></tr></table></figure><p>通过<code>godoc</code>打开本地文档:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:8001</span><br></pre></td></tr></table></figure><p>hello world:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>编译产生二进制文件并查看然后运行，最后删除二进制文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go build temp.go &amp;&amp; ./temp &amp;&amp; file ./temp &amp;&amp; rm ./temp</span><br><span class="line">Hello world!</span><br><span class="line">./temp: Mach-O 64-bit executable x86_64</span><br></pre></td></tr></table></figure><p>引入未使用的包会报错:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line"># command-line-arguments</span><br><span class="line">./temp.go:6:5: imported and not used: &quot;os&quot;</span><br></pre></td></tr></table></figure><p>可以使用下划线忽略之:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    _ <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载并使用Go包:</p><p>首先需要配置 <code>GOPATH</code> 的环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/leeyang/Downloads/阅读计划/MasteringGo</span><br></pre></td></tr></table></figure><p>然后通过<code>get</code>选项下载示例包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -v github.com/mactsouk/go/simpleGitHub</span><br></pre></td></tr></table></figure><p>此时目录下有pkg和src目录，分别存放 目标文件 <code>simpleGitHub.a</code> 和 源文件 <code>simpleGitHub.go</code></p><p>使用示例包:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    _ <span class="string">"os"</span></span><br><span class="line">    <span class="string">"github.com/mactsouk/go/simpleGitHub"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">    fmt.Println(simpleGitHub.AddTwo(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下命令删除一个包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ  go clean -i -v -x github.com/mactsouk/go/simpleGitHub</span><br><span class="line"></span><br><span class="line">cd /Users/leeyang/Downloads/阅读计划/MasteringGo/src/github.com/mactsouk/go/simpleGitHub</span><br><span class="line">rm -f simpleGitHub.test simpleGitHub.test.exe</span><br><span class="line">rm -f /Users/leeyang/Downloads/阅读计划/MasteringGo/pkg/darwin_amd64/github.com/mactsouk/go/simpleGitHub.a</span><br></pre></td></tr></table></figure><p>插播Linux stdin, stdout, and stderr相关知识:</p><blockquote><p>Every Unix operating system has three files open all the time for its processes.</p></blockquote><p>每个进程都有三个fd, stdin, stdout 和 stderr, 比如如下的Python进程:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">while <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>lsof -p pid</code> 查看打开的fd:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">λ lsof -p 53117</span><br><span class="line"></span><br><span class="line">COMMAND   PID    USER   FD   TYPE DEVICE  SIZE/OFF     NODE NAME</span><br><span class="line">Python  53117 leeyang  cwd    DIR    1,4       272 93945067 /Users/leeyang/Downloads/阅读计划/MasteringGo</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     12744  7052532 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4   1458024  7052521 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/Python</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4    158720  7843718 /System/Library/CoreServices/Encodings/libSimplifiedChineseConverter.dylib</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     19540  7054949 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_locale.so</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     20920  7055007 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/time.so</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4    622960 64959807 /usr/lib/dyld</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4 383981947 82222601 /private/var/run/diagnosticd/dyld_shared_cache_x86_64h</span><br><span class="line">Python  53117 leeyang    0u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br><span class="line">Python  53117 leeyang    1u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br><span class="line">Python  53117 leeyang    2u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br></pre></td></tr></table></figure><p>在 Go 语言中是 以下三个:</p><p><code>os.Stdin, os.Stdout, os.Stderr</code></p><p>使用 <code>os.Stdout</code> 输出 命令行 参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arguments := os.Args</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        io.WriteString(os.Stdout, arguments[i])</span><br><span class="line">        io.WriteString(os.Stdout, <span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 1 2 3 4</span><br><span class="line">/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/go-build924171124/b001/exe/temp</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>使用 <code>os.Stdin</code> 读入 参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f *os.File</span><br><span class="line">    f = os.Stdin</span><br><span class="line">    <span class="keyword">defer</span> f.Close()  <span class="comment">// 函数之前退出前执行</span></span><br><span class="line"></span><br><span class="line">    scanner := bufio.NewScanner(f)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        fmt.Println(<span class="string">"&gt;"</span>, scanner.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go        </span><br><span class="line">ll</span><br><span class="line">&gt; ll</span><br><span class="line">hello</span><br><span class="line">&gt; hello</span><br><span class="line">world</span><br><span class="line">&gt; world</span><br></pre></td></tr></table></figure><p>关于 <code>defer</code> :</p><blockquote><p>defer会按逆序执行</p></blockquote><blockquote><p>defer是Go语言提供的关键字，常用来释放资源，会在函数返回之前进行调用。如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。defer 函数调用的执行时机是外层函数设置返回值之后, 并且在即将返回之前。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> i:=<span class="number">0</span> ;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">              <span class="keyword">defer</span> fmt.Printf(<span class="string">"%d"</span>,i)</span><br><span class="line">              fmt.Println(<span class="string">"bbbbb"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         fmt.Println(<span class="string">"aaaaa"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">aaaaa</span><br><span class="line">43210</span><br></pre></td></tr></table></figure><p>获取命令行中数值最值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"输入一些数值!"</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)  <span class="comment">// main()函数必须通过os.Exit()返回数值，不能直接return 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line">    min, _ := strconv.ParseFloat(arguments[<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line">    max, _ := strconv.ParseFloat(arguments[<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, _ := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; min &#123;</span><br><span class="line">            min = num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> num &gt; max &#123;</span><br><span class="line">            max = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Min:"</span>, min)</span><br><span class="line">    fmt.Println(<span class="string">"Max:"</span>, max)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 12 3 4  5 6 -100</span><br><span class="line">Min: -100</span><br><span class="line">Max: 12</span><br></pre></td></tr></table></figure><p><code>min, _ := strconv.ParseFloat(arguments[1], 64)</code> 这里如果ParseFloat函数解析失败，会返回错误<br>这里使用下划线忽略了，实际项目中，不能这么做，很危险！</p><p>关于标准输出和标准错误的重定向，其实，每个语言都一样，比如下面代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myString := <span class="string">"This is Standard outerr output"</span></span><br><span class="line">    io.WriteString(os.Stdout, <span class="string">"This is Standard Stdout output\n"</span>)</span><br><span class="line">    io.WriteString(os.Stderr, myString)</span><br><span class="line">    io.WriteString(os.Stderr, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line">This is Standard Stdout output</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>重定向标准输出到 黑洞 <code>/dev/null</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 1&gt; /dev/null</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>重定向标准错误到 黑洞 <code>/dev/null</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 2&gt;/dev/null</span><br><span class="line">This is Standard Stdout output</span><br></pre></td></tr></table></figure><p>重定向到文件，标准错误重定向到标准输出，再重定向到 <code>templog</code> 文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go &gt; templog 2&gt;&amp;1</span><br><span class="line">λ cat templog </span><br><span class="line"></span><br><span class="line">This is Standard Stdout output</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>记录日志到 log 中.</p><p><code>log</code> 包中主要有以下方法:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log.Printf()</span><br><span class="line">log.Print()</span><br><span class="line">log.Println()</span><br><span class="line"></span><br><span class="line">log.Fatalf()</span><br><span class="line">log.Fatalln()</span><br><span class="line"></span><br><span class="line">log.Panic()</span><br><span class="line">log.Panicln()</span><br><span class="line">log.Panicf()</span><br></pre></td></tr></table></figure><p>按照严重程度 有以下级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug, info, notice, warning, err, crit, alert, emerg</span><br></pre></td></tr></table></figure><p>插播系统服务日志相关知识 <code>syslogd</code> (macOS) 和 <code>rsyslogd</code> (Linux)</p><blockquote><p>All Unix machines have a separate server process that is responsible for receiving logging<br>data and writing it to log files.</p></blockquote><p>以Linux为例，一般 rsyslogd 配置文件在 <code>/etc/rsyslog.conf</code> </p><p>通过以下命令查看去除注释等的主要配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ grep -v &apos;^#&apos; /etc/rsyslog.conf | grep -v &apos;^$&apos; | grep -v &apos;^\$&apos;</span><br><span class="line"></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class="line">authpriv.*                                              /var/log/secure</span><br><span class="line">mail.*                                                  -/var/log/maillog</span><br><span class="line">cron.*                                                  /var/log/cron</span><br><span class="line">*.emerg                                                 *</span><br><span class="line">uucp,news.crit                                          /var/log/spooler</span><br><span class="line">local7.*                                                /var/log/boot.log</span><br><span class="line">local6.*                                                /var/log/message</span><br></pre></td></tr></table></figure><p>以下是 <code>man rsyslogd</code> 的部分说明:</p><blockquote><p>rsyslogd - reliable and extended syslogd<br>Rsyslogd  is  a  system  utility  providing  support for message logging.<br>Support of both internet and unix domain sockets enables this utility to support both local and remote logging.<br>The  main  configuration file /etc/rsyslog.conf or an alternative file, given with the -f option, is read at startup.</p></blockquote><blockquote><p>/etc/rsyslog.conf<br>  Configuration file for rsyslogd.  See rsyslog.conf(5) for exact information.<br>/dev/log<br>  The Unix domain socket to from where local syslog messages are read.<br>/var/run/rsyslogd.pid<br>  The file containing the process id of rsyslogd.<br>prefix/lib/rsyslog<br>  Default directory for rsyslogd modules. The prefix is specified during compilation (e.g. /usr/local).</p></blockquote><p>大概了解这个系统服务的主要目的是提供消息日志，并可以通过网络的方式记录日志，并了解了相关的文件。</p><p>使用代码将 message 写入 <code>/var/log/messages</code> 文件内:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    code_name = filepath.Base(os.Args[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// http://devdocs.io/go/log/syslog/index</span></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_INFO | syslog.LOG_LOCAL6, code_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">"LOG_INFO + LOG_LOCAL6: Logging in Go!"</span>)</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go</span><br><span class="line">Will you see this?</span><br><span class="line"></span><br><span class="line">Message from syslogd@chenwen at Aug 21 21:28:02 ...</span><br><span class="line"> Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/maillog</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/postfix-script[13718]: stopping the Postfix mail system</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/master[1631]: terminating on signal 15</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/postfix-script[1631]: starting the Postfix mail system</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/master[1632]: daemon started -- version 2.6.6, configuration /etc/postfix</span><br><span class="line">Aug 21 21:28:02 chenwen Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/message.log</span><br><span class="line">Aug 21 21:28:02 chenwen temp[3459]: 2018/08/21 21:28:02 LOG_INFO + LOG_LOCAL6: Logging in Go!</span><br></pre></td></tr></table></figure><p>关于 <code>log.Fatal()</code> :</p><blockquote><p>The log.Fatal() function is used when something really bad has happened,<br>and you just want to exit your program as fast as possible after reporting the bad situation. </p></blockquote><p>使用log.Fatal() 是为了程序出现严重错误时及时退出，调用之后后面的语句不会执行了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_ALERT | syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Fatal(sysLog)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面都不会执行的</span></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go </span><br><span class="line">exit status 1</span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/message.log</span><br><span class="line">Aug 21 21:28:02 chenwen temp[3459]: 2018/08/21 21:28:02 LOG_INFO + LOG_LOCAL6: Logging in Go!</span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/maillog    </span><br><span class="line">Aug 21 21:16:29 chenwen postfix/postfix-script[13718]: stopping the Postfix mail system</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/master[1631]: terminating on signal 15</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/postfix-script[1631]: starting the Postfix mail system</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/master[1632]: daemon started -- version 2.6.6, configuration /etc/postfix</span><br><span class="line">Aug 21 21:28:02 chenwen Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line">Aug 21 21:40:59 chenwen Some program![3696]: 2018/08/21 21:40:59 &amp;&#123;17 Some program! chenwen.zooer   &#123;0 0&#125; 0xc42000c100&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>log.Panic()</code>:</p><blockquote><p>There are situations where a program will fail for good, and you want to have as much<br>information about the failure as possible. In such difficult circumstances, you might<br>consider using log.Panic()</p></blockquote><blockquote><p>The use of the log.Panic() function will add an entry to the proper log file and will immediately terminate the Go program.</p></blockquote><p>简单说，log.Panic 会提供更多底层的信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_ALERT | syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Panic(sysLog)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面都不会执行的</span></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go </span><br><span class="line">panic: &amp;&#123;17 Some program! chenwen.zooer   &#123;0 0&#125; 0xc4200840c0&#125;</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">log.Panic(0xc42004df50, 0x1, 0x1)</span><br><span class="line">    /usr/lib/golang/src/log/log.go:326 +0xc0</span><br><span class="line">main.main()</span><br><span class="line">    /home/vagrant/temp.go:20 +0xed</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><p>错误处理，定义自己的错误信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnError</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a == b &#123;</span><br><span class="line">        err_info := errors.New(<span class="string">"error happend in returnError()!"</span>)</span><br><span class="line">        <span class="keyword">return</span> err_info</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := returnError(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"returnError() ended normally!"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = returnError(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"returnError() ended normally!"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到错误信息</span></span><br><span class="line">    <span class="keyword">if</span> err.Error() == <span class="string">"error happend in returnError()!"</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"!!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go               </span><br><span class="line">returnError() ended normally!</span><br><span class="line">error happend in returnError()!</span><br><span class="line">!!</span><br></pre></td></tr></table></figure><p>加入错误处理的 <code>strconv.ParseFloat</code> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> err error = errors.New(<span class="string">"An error"</span>)</span><br><span class="line"></span><br><span class="line">    k := <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> n <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> k &gt;= <span class="built_in">len</span>(arguments) &#123;</span><br><span class="line">            fmt.Println(<span class="string">"None of the arguments is a float!"</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        n, err = strconv.ParseFloat(arguments[k], <span class="number">64</span>)</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    min, max := n, n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        n, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n &lt; min &#123;</span><br><span class="line">                min = n</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> n &gt; max &#123;</span><br><span class="line">                max = n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Min:"</span>, min)</span><br><span class="line">    fmt.Println(<span class="string">"Max:"</span>, max)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 12 3 4 5 6  -10</span><br><span class="line">Min: -10</span><br><span class="line">Max: 12</span><br><span class="line"></span><br><span class="line">λ go run temp.go a b c          </span><br><span class="line">None of the arguments is a float!</span><br></pre></td></tr></table></figure><p>练习1:</p><blockquote><p>Write a Go program that finds the sum of all of its numeric command-line<br>arguments</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += num</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"sum of arguments is %f\n"</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2:</p><blockquote><p>Write a Go program that finds the average value of all of its float command-line<br>arguments</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">float64</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += num</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"sum of arguments is %f argv is %f\n"</span>, sum, sum / count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习3:</p><blockquote><p>Write a Go program that keeps reading integers until it gets the word STOP as<br>input</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f *os.File</span><br><span class="line">    f = os.Stdin</span><br><span class="line">    <span class="keyword">defer</span> f.Close()  <span class="comment">// 函数之前退出前执行</span></span><br><span class="line"></span><br><span class="line">    scanner := bufio.NewScanner(f)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(scanner.Text(), <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(num)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            os.Exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://golang.org/doc/" target="_blank" rel="noopener">https://golang.org/doc/</a><br><a href="https://golang.org/pkg/log/syslog/" target="_blank" rel="noopener">https://golang.org/pkg/log/syslog/</a><br><a href="https://golang.org/pkg/os" target="_blank" rel="noopener">https://golang.org/pkg/os</a><br><a href="https://golang.org/cmd/gofmt/" target="_blank" rel="noopener">https://golang.org/cmd/gofmt/</a><br><a href="https://golang.org/pkg/fmt/" target="_blank" rel="noopener">https://golang.org/pkg/fmt/</a><br><a href="https://golang.org/pkg/log/" target="_blank" rel="noopener">https://golang.org/pkg/log/</a><br><a href="https://blog.csdn.net/skh2015java/article/details/77081250" target="_blank" rel="noopener">https://blog.csdn.net/skh2015java/article/details/77081250</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GoldbachConjecture 哥德巴赫猜想</title>
      <link href="/2018/08/15/GoldbachConjecture/"/>
      <url>/2018/08/15/GoldbachConjecture/</url>
      <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3" target="_blank" rel="noopener">哥德巴赫猜想</a>#<em>任一大于2的偶数，都可表示成两个素数之和</em>#</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入一个偶数，输出这个偶数为两个素数之和的表现形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldbachConjecture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goldbachConjecture</span><span class="params">(<span class="keyword">int</span> even)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (even &lt; <span class="number">2</span> || even % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只用循环到even的一半，不然会重复输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= even / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = even - i;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i) &amp;&amp; isPrime(j)) &#123;</span><br><span class="line">                System.out.println(even + <span class="string">" = "</span> + i + <span class="string">"+"</span> +j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(number); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法&amp;题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arithmetic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode_Count_and_say</title>
      <link href="/2018/08/13/LeetCode-Count-and-say/"/>
      <url>/2018/08/13/LeetCode-Count-and-say/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode-count-and-say问题"><a href="#LeetCode-count-and-say问题" class="headerlink" title="LeetCode count and say问题"></a>LeetCode count and say问题</h2><a id="more"></a><p><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener">这个问题</a>，记得高中学习排列组合时候，有同学拿去问数学老师，说是排列组合问题，没想到被老师识破，哈哈哈。。。刚学编程时候想要实现下，但是那时候好弱，写不出来。</p><p>问题描述：</p><p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …</p><p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.</p><p>其实这个问题就是简单的模拟。</p><p>Python实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#condig=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://leetcode.com/problems/count-and-say/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(start)</span>:</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    length = len(start)</span><br><span class="line"></span><br><span class="line">    temp_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        next_one = index + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 需要将最后一个数字和它的次数存到temp</span></span><br><span class="line">        <span class="keyword">if</span> next_one &gt;= length:</span><br><span class="line">            temp = str(count) + start[index]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 计数次数，相同计数加一</span></span><br><span class="line">            <span class="keyword">if</span> start[index] == start[next_one]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 不同将当前次数和数字存入temp，加入列表，重置计数</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = str(count) + start[index]</span><br><span class="line">                temp_list.append(temp)</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将最后一个temp变量加入列表</span></span><br><span class="line">    temp_list.append(temp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(temp_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        start = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            start = get_num(start)</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C语言实现如下，就是再翻译一遍:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">next_num</span><span class="params">(<span class="keyword">char</span>* num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>, next_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> length = <span class="built_in">strlen</span>(num);</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * (length*<span class="number">2</span>));</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> tmp_res[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    next_index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (next_index &gt;= length) &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">      <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[index] == num[next_index]) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">        <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * MAX_LEN);</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">  res[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    res = next_num(res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过这样写，没有free掉malloc得到的内存，会出现内存泄漏的，所以，next_num中不使用malloc函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 5000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next_num</span><span class="params">(<span class="keyword">char</span>* num, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>, next_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> res[MAX_LEN];</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> tmp_res[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    next_index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (next_index == length) &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">      <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[index] == num[next_index]) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">        <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  num[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="built_in">strcat</span>(num, res);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(num));</span><br><span class="line">  num[<span class="built_in">strlen</span>(num)] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * MAX_LEN);</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">  res[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">int</span> i, length = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    length = <span class="built_in">strlen</span>(res);</span><br><span class="line">    next_num(res, length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>Java版本实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountAndSay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String term = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            term = parseString(term);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> term;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">parseString</span><span class="params">(String term)</span> </span>&#123;</span><br><span class="line">        String[] terms = term.split(<span class="string">""</span>);</span><br><span class="line">        StringBuffer sequence = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String curInt = terms[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> curNum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; terms.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == terms.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sequence.append(curNum + curInt);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (terms[i].equals(terms[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                curNum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sequence.append(curNum + curInt);</span><br><span class="line">                curInt = terms[i + <span class="number">1</span>];</span><br><span class="line">                curNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sequence.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法&amp;题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/13/hello-world/"/>
      <url>/2018/08/13/hello-world/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="Take-a-desk-start-a-family-For-each-other"><a href="#Take-a-desk-start-a-family-For-each-other" class="headerlink" title="Take a desk, start a family. For each other."></a>Take a desk, start a family. For each other.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world! 你好 世界！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
