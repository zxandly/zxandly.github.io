<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>测试Lambda表达式、调试</title>
      <link href="/2018/10/25/%E6%B5%8B%E8%AF%95Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E8%B0%83%E8%AF%95/"/>
      <url>/2018/10/25/%E6%B5%8B%E8%AF%95Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>通常而言，好的软件工程实践一定少不了<strong>单元测试</strong>，借此保证程序的行为和预期一致。</p><h2 id="1-测试可见Lambda函数的行为"><a href="#1-测试可见Lambda函数的行为" class="headerlink" title="1.测试可见Lambda函数的行为"></a>1.测试可见Lambda函数的行为</h2><p>由于Lambda并无函数名（匿名函数），因此要对代码中的Lambda函数进行测试实际上比较困难，因此要对代码中的Lambda函数进行测试实际上比较困难，因为无法通过函数名的方式调用它们。<br>有些时候，可以借助某个字段访问Lambda函数，这种情况下，你可以利用这些字段，通过它们对封装在Lambda函数内的逻辑进行测试。比如，我们假设你在Point类中添加了静态字段compareByXAndThenY，通过该字段，使用方法引用你可以访问Comparator对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Comparator&lt;Point&gt; compareByXAndThenY = </span><br><span class="line">                                   Comparator.comparing(Point::getX).thenComparing(Point::getY);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Point p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line">        Point p2 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> result = Point.compareByXAndThenY.compare(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-测试使用Lambda的方法的行为"><a href="#2-测试使用Lambda的方法的行为" class="headerlink" title="2.测试使用Lambda的方法的行为"></a>2.测试使用Lambda的方法的行为</h2><p>但是Lambda的初衷是将一部分逻辑封装起来给另一个方法使用。从这个角度出发，你不应该将Lambda表达式声明为public，它们仅是具体的实现细节。相反，我们需要对使用Lambda表达式的方法进行测试，比如下面这个方法moveAllPointsRightBy：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point&gt; <span class="title">moveAllPointRightBy</span><span class="params">(List&lt;Point&gt; points, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> points.stream()</span><br><span class="line">                 .map(p -&gt; <span class="keyword">new</span> Point(p.getX() + x, p.getY()))</span><br><span class="line">                 .collect(Collectors.toList())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们没必要对Lambda表达式p -&gt; new Point(p.getX() + x,p.getY())进行测试，它只是moveAllPointsRightBy内部的实现细节。我们更应该关注的是方法moveAllPointsRightBy的行为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMoveAllPointsRightBy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">List&lt;Point&gt; points = Arrays.asList(<span class="keyword">new</span> Point(<span class="number">5</span>, <span class="number">5</span>), <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">List&lt;Point&gt; expectedPoints = Arrays.asList(<span class="keyword">new</span> Point(<span class="number">15</span>, <span class="number">5</span>), <span class="keyword">new</span> Point(<span class="number">20</span>, <span class="number">5</span>));</span><br><span class="line">List&lt;Point&gt; newPoints = Point.moveAllPointsRightBy(points, <span class="number">10</span>);</span><br><span class="line">assertEquals(expectedPoints, newPoints);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，上面的单元测试中，Point类恰当地实现equals方法非常重要，否则该测试的结果就取决于Object类的默认实现。</p><h2 id="3-将复杂的Lambda表达式分到不同的方法"><a href="#3-将复杂的Lambda表达式分到不同的方法" class="headerlink" title="3.将复杂的Lambda表达式分到不同的方法"></a>3.将复杂的Lambda表达式分到不同的方法</h2><p>可能会碰到非常复杂的Lambda表达式，包含大量的业务逻辑，比如需要处理复杂情况的定价算法。你无法在测试程序中引用Lambda表达式，这种情况该如何处理呢？一种策略是将Lambda表达式转换为方法引用（这时往往需要声明一个新的常规方法），这之后，你可以用常规的方式对新的方法进行测试。</p><h2 id="4-高阶函数的测试"><a href="#4-高阶函数的测试" class="headerlink" title="4.高阶函数的测试"></a>4.高阶函数的测试</h2><p>接受函数作为参数的方法或者返回一个函数的方法（所谓的“高阶函数”， higher-order function）更难测试。如果一个方法接受Lambda表达式作为参数，你可以采用的一个方案是使用不同的Lambda表达式对它进行测试。比如，可以使用不同的谓词对第二章中创建的filter方法急性测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; even = filter(numbers, i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">List&lt;Integer&gt; smallerThanThree = filter(numbers, i -&gt; i &lt; <span class="number">3</span>);</span><br><span class="line">assertEquals(Arrays.asList(<span class="number">2</span>, <span class="number">4</span>), even);</span><br><span class="line">assertEquals(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>), smallerThanThree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果被测试方法的返回值是另一个方法，该如何处理呢？可以仿照我们之前处理Comparator的方法，把它当作一个函数接口，对它的功能进行测试。</p><h2 id="5-调试"><a href="#5-调试" class="headerlink" title="5.调试"></a>5.调试</h2><p>调试有问题的代码时，程序员的兵器库里有两大老式武器，分别是：查看栈跟踪、输出日志</p><h3 id="5-1查看栈跟踪"><a href="#5-1查看栈跟踪" class="headerlink" title="5.1查看栈跟踪"></a>5.1查看栈跟踪</h3><p>你的程序突然停止运行（比如突然抛出一个异常），这时你首先要调查程序在什么地方发生了异常以及为什么会发生该异常。这是栈帧就非常有用。程序的每次方法调用都会产生相应的调用信息，包括<strong>程序中方法调用的位置、该方法调用使用的参数、被调用方法的本地变量。</strong>这些信息被保存在栈帧上。<br>程序失败时，你会得到它的<strong>栈跟踪</strong>，通过一个又一个栈帧，可以了解程序失败时的概略信息。换句话说，通过这些你能得到程序失败时的方法调用列表。这些方法调用列表最终会帮助你发现问题出现的原因。</p><h4 id="Lambda表达式和栈跟踪"><a href="#Lambda表达式和栈跟踪" class="headerlink" title="Lambda表达式和栈跟踪"></a>Lambda表达式和栈跟踪</h4><p>不幸的是，由于Lambda表达式没有名字，它的栈跟踪可能很难分析。<br>…（详见181-182页）<br>总的来说，我们需要特别注意，涉及Lambda表达式的栈跟踪可能非常难理解。这是Java编译器未来版本可以改进的一个方面。</p><h3 id="5-2使用日志调试"><a href="#5-2使用日志调试" class="headerlink" title="5.2使用日志调试"></a>5.2使用日志调试</h3><p>假设你试图对流操作中的流水线进行测试，该从何入手呢？可以像下面的例子那样，使用forEach将操作的结果日志输出到屏幕上或记录到日志文件中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">numbers.stream()</span><br><span class="line">       .map(x -&gt; x + <span class="number">17</span>)</span><br><span class="line">       .filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">       .limit(<span class="number">3</span>)</span><br><span class="line">       .forEach(System.out::println);</span><br><span class="line">这段代码的输出如下：</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure></p><p>不幸的是，一旦调用forEach，整个流就会恢复运行。到底哪种方法能更有效地帮我们理解Stream流水线中的每个操作？（比如map、filter、limit）产生的输出？<br>这就是流操作方法peek大显身手的时候。peek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。但是他不像forEach那样恢复整个流的运行，而是在一个元素上完成操作之后，它只会将操作顺承到流水线中的下一个操作。图8-4解释了peek的操作流程。下面这段代码中，我们使用了peek输出了Stream流水线操作之前和操作之后的中间值：<br><img src="img/使用peek查看Stream流水线中的数据流的值.jpeg"><br>    通过peek操作我们能清楚地了解流水线中每一步的输出结果：<br>    from stream: 2<br>    after map: 19<br>    from stream: 3<br>    after map: 20<br>    after filter: 20<br>    after limit: 20<br>    from stream: 4<br>    after map: 21<br>    from stream: 5<br>    after map: 22<br>    after filter: 22<br>    after limit: 22</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>弄懂JDK、JRE和JVM到底是什么</title>
      <link href="/2018/09/29/%E5%BC%84%E6%87%82JDK%E3%80%81JRE%E5%92%8CJVM%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/09/29/%E5%BC%84%E6%87%82JDK%E3%80%81JRE%E5%92%8CJVM%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/songkai320/article/details/51819046" target="_blank" rel="noopener">原文地址</a><br><a id="more"></a></p><h4 id="首先是JDK"><a href="#首先是JDK" class="headerlink" title="首先是JDK"></a>首先是JDK</h4><p>JDK（Java Development Kit）是Java语言的软件开发工具包（SDK）。在JDK的安装目录下有一个jre目录（本机地址如下<em>/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home</em>），里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和lib合起来就称为jre。</p><h4 id="其次是JRE"><a href="#其次是JRE" class="headerlink" title="其次是JRE"></a>其次是JRE</h4><p>JRE（Java Runtime Enviorment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）。</p><h4 id="最后JVM"><a href="#最后JVM" class="headerlink" title="最后JVM"></a>最后JVM</h4><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p><img src="img/JDK&JRE&JVM.png"><br>由上图一目了然：<br>JDK使整个Java的核心，包括了Java运行环境JRE、Java工具和<strong>Java基础类库</strong>（rt.jar）。JRE是运行Java程序所必须的环境的集合，包含JVM标准实现及<strong>Java核心类库</strong>。JVM是整个Java实现跨平台的最核心的部分，能够运行以Java语言写的程序。</p><h3 id="JVM体系结构与运行原理："><a href="#JVM体系结构与运行原理：" class="headerlink" title="JVM体系结构与运行原理："></a>JVM体系结构与运行原理：</h3><p>Java语言写的源程序通过Java编译器，编译成与平台无关的“字节码程序”（.class文件，也就是0，1二进制程序）,然后在OS之上的Java解释器中编译执行。<br><img src="img/JVM类加载过程.png"></p><h4 id="1-装载"><a href="#1-装载" class="headerlink" title="1.装载"></a>1.装载</h4><p>装载过程负责找到二进制字节码并加载至JVM中，JVM通过类名、类所在的包名通过ClassLoader来完成类的加载，同样，也采用以上三个元素来标识一个被加载了的类；类名+包名+ClassLoader实例ID。</p><h4 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h4><p>链接过程负责对二进制字节码的格式进行校验、初始化装载类中的静态变量以及解析类中调用的接口、类。<br>完成校验后，JVM初始化类中的静态变量，并将其值赋为默认值。<br>最后对类中的所有属性、方法进行验证，以确保其需要调用的属性、方法存在，以及具备对应的权限（例如public、private域权限等，会造成NoSuchMethodError、NoSuchFieldError等错误信息）。</p><h4 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h4><p>初始化过程中即为执行类中的静态初始化代码、构造器代码以及静态属性的初始化，在四种情况下初始化过程会被触发执行：<br> 1.调用了new<br> 2.反射调用了类中的方法<br> 3.子类调用了初始化<br> 4.JVM启动过程中指定的初始化类</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="img/JVM体系结构与运行原理.jpeg"></h2><h3 id="ClassLoader抽象类的几个关键方法"><a href="#ClassLoader抽象类的几个关键方法" class="headerlink" title="ClassLoader抽象类的几个关键方法"></a>ClassLoader抽象类的几个关键方法</h3><h4 id="1-loadClass"><a href="#1-loadClass" class="headerlink" title="1.loadClass"></a>1.loadClass</h4><p>此方法负责加载指定名字的类，ClassLoader的实现方法为先从已经加载的类中寻找，如没有则继续从parent ClassLoader中寻找，如仍然没有找到，则从System ClassLoader中寻找，最后再调用findClass方法来寻找，如要改变类的加载顺序，则可覆盖此方法。</p><h4 id="2-findLoadedClass"><a href="#2-findLoadedClass" class="headerlink" title="2.findLoadedClass"></a>2.findLoadedClass</h4><p>此方法负责从当前ClassLoader实例对象的缓存中寻找已加载的类，调用的为native的方法。</p><h4 id="3-findClass"><a href="#3-findClass" class="headerlink" title="3.findClass"></a>3.findClass</h4><p>此方法直接抛出ClassNotFoundException，因此需要通过覆盖loadClass或此方法来以自定义的方法加载相应的类。</p><h4 id="4-findSystemClass"><a href="#4-findSystemClass" class="headerlink" title="4.findSystemClass"></a>4.findSystemClass</h4><p>此方法负责从System ClassLoader中寻找类，如未找到，则继续从Bootstrap ClassLoader中寻找，如仍然未找到，则返回null。</p><h4 id="5-defineClass"><a href="#5-defineClass" class="headerlink" title="5.defineClass"></a>5.defineClass</h4><p>此方法负责将二进制的字节码转换为Class对象</p><h4 id="6-resolveClass"><a href="#6-resolveClass" class="headerlink" title="6.resolveClass"></a>6.resolveClass</h4><p>此方法负责完成Class对象的链接，如已链接过，则会直接返回。</p><p>JVM运行时数据区：</p><h4 id="第一块：PC寄存器"><a href="#第一块：PC寄存器" class="headerlink" title="第一块：PC寄存器"></a>第一块：PC寄存器</h4><p>PC寄存器是用于存储每个线程下一步将执行的JVM指令，如该方法为native，则PC寄存器中不存储任何信息</p><h4 id="第二块：JVM栈"><a href="#第二块：JVM栈" class="headerlink" title="第二块：JVM栈"></a>第二块：JVM栈</h4><p>JVM栈是线程私有的，每个线程创建的同时都会创建JVM栈，JVM栈中存放的为当前线程中局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double）、部分的返回结果以及Stack Frame，非基本类型的对象在JVM栈上仅存放一个指向堆上的地址</p><h4 id="第三块：堆（Heap）"><a href="#第三块：堆（Heap）" class="headerlink" title="第三块：堆（Heap）"></a>第三块：堆（Heap）</h4><p>它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配，Heap中的对象的内存需要等待GC进行回收。</p><h4 id="第四块：方法区域（Method-Area）"><a href="#第四块：方法区域（Method-Area）" class="headerlink" title="第四块：方法区域（Method Area）"></a>第四块：方法区域（Method Area）</h4><p>1.在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。<br>2.方法区域存放了所加载的类的信息（名称，修饰符等）、类中的静态变量、类中定义为final类型的变量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p><h4 id="第五块：运行时常量池（Runtime-Constant-Pool）"><a href="#第五块：运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="第五块：运行时常量池（Runtime Constant Pool）"></a>第五块：运行时常量池（Runtime Constant Pool）</h4><p>存放的为类中的固定的常量信息，方法和Field的引用信息等，其空间从方法区域中分配</p><h4 id="第六块：本地方法堆栈（Native-Method-Stacks）"><a href="#第六块：本地方法堆栈（Native-Method-Stacks）" class="headerlink" title="第六块：本地方法堆栈（Native Method Stacks）"></a>第六块：本地方法堆栈（Native Method Stacks）</h4><p>JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法的调用状态。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown简明语法</title>
      <link href="/2018/09/27/markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/09/27/markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>链接如下<br><a id="more"></a><br><a href="https://www.cnblogs.com/back-man/p/5012746.html" target="_blank" rel="noopener">markdown简明语法</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>URI和URL差别以及相对路径和绝对路径的差别</title>
      <link href="/2018/09/27/URI%E5%92%8CURL%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
      <url>/2018/09/27/URI%E5%92%8CURL%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
      <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zsychanpin/p/6742389.html" target="_blank" rel="noopener">原文地址</a><br><a id="more"></a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java中Math.round()方法原理解读</title>
      <link href="/2018/09/26/java%E4%B8%ADMath-round-%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/09/26/java%E4%B8%ADMath-round-%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/rt12345678910/article/details/78009529" target="_blank" rel="noopener">原文地址</a><br><a id="more"></a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis的常见面试题</title>
      <link href="/2018/09/26/Mybatis%E7%9A%84%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/09/26/Mybatis%E7%9A%84%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/eaphyy/article/details/71190441" target="_blank" rel="noopener">原文地址</a><br><a id="more"></a></p><h4 id="1-和-的区别是什么"><a href="#1-和-的区别是什么" class="headerlink" title="1.#{}和${}的区别是什么"></a>1.#{}和${}的区别是什么</h4><p>#{}是预编译处理，\${}是字符串替换。<br>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；<br>Mybatis在处理\${}时，就是把${}替换为变量的值。<br>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h4 id="2-当实体类中的属性名和表中的字段名不一样，怎么办？"><a href="#2-当实体类中的属性名和表中的字段名不一样，怎么办？" class="headerlink" title="2.当实体类中的属性名和表中的字段名不一样，怎么办？"></a>2.当实体类中的属性名和表中的字段名不一样，怎么办？</h4><h4 id="3-模糊查询like语句应该怎么写"><a href="#3-模糊查询like语句应该怎么写" class="headerlink" title="3.模糊查询like语句应该怎么写"></a>3.模糊查询like语句应该怎么写</h4><h4 id="4-通常一个xml映射文件，都会写一个DAO接口与之对应，请问这个DAO接口的工作原理是什么？DAO接口里的方法，参数不同时，方法能重载么？"><a href="#4-通常一个xml映射文件，都会写一个DAO接口与之对应，请问这个DAO接口的工作原理是什么？DAO接口里的方法，参数不同时，方法能重载么？" class="headerlink" title="4.通常一个xml映射文件，都会写一个DAO接口与之对应，请问这个DAO接口的工作原理是什么？DAO接口里的方法，参数不同时，方法能重载么？"></a>4.通常一个xml映射文件，都会写一个DAO接口与之对应，请问这个DAO接口的工作原理是什么？DAO接口里的方法，参数不同时，方法能重载么？</h4><h4 id="5-Mytatis时如何进行分页的，分页插件的原理是什么？"><a href="#5-Mytatis时如何进行分页的，分页插件的原理是什么？" class="headerlink" title="5.Mytatis时如何进行分页的，分页插件的原理是什么？"></a>5.Mytatis时如何进行分页的，分页插件的原理是什么？</h4><h4 id="6-Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#6-Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="6.Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>6.Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h4><h4 id="7-如何执行批量插入"><a href="#7-如何执行批量插入" class="headerlink" title="7.如何执行批量插入"></a>7.如何执行批量插入</h4><h4 id="8-如何自动获取自动生成的（主）键值？"><a href="#8-如何自动获取自动生成的（主）键值？" class="headerlink" title="8.如何自动获取自动生成的（主）键值？"></a>8.如何自动获取自动生成的（主）键值？</h4><h4 id="9-在mapper中如何传递多个参数"><a href="#9-在mapper中如何传递多个参数" class="headerlink" title="9.在mapper中如何传递多个参数"></a>9.在mapper中如何传递多个参数</h4><h4 id="10-Mybatis动态sql是做什么？都有哪些动态sql？能简述一下动态sql的执行原理么？"><a href="#10-Mybatis动态sql是做什么？都有哪些动态sql？能简述一下动态sql的执行原理么？" class="headerlink" title="10.Mybatis动态sql是做什么？都有哪些动态sql？能简述一下动态sql的执行原理么？"></a>10.Mybatis动态sql是做什么？都有哪些动态sql？能简述一下动态sql的执行原理么？</h4><h4 id="11-Mybatis的xml映射文件中，不同的xml映射文件，id是否可以重复？"><a href="#11-Mybatis的xml映射文件中，不同的xml映射文件，id是否可以重复？" class="headerlink" title="11.Mybatis的xml映射文件中，不同的xml映射文件，id是否可以重复？"></a>11.Mybatis的xml映射文件中，不同的xml映射文件，id是否可以重复？</h4><h4 id="12-为什么说Mybatis时半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#12-为什么说Mybatis时半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="12.为什么说Mybatis时半自动ORM映射工具？它与全自动的区别在哪里？"></a>12.为什么说Mybatis时半自动ORM映射工具？它与全自动的区别在哪里？</h4><h4 id="13-一对一，一对多的关联查询？"><a href="#13-一对一，一对多的关联查询？" class="headerlink" title="13.一对一，一对多的关联查询？"></a>13.一对一，一对多的关联查询？</h4>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
          <category> 面试题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM的堆内存和栈内存</title>
      <link href="/2018/09/26/JVM%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98/"/>
      <url>/2018/09/26/JVM%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建子类对象时，父类构造函数中调用被子类重写的方法为什么调用的 是子类的方法，而被子类重载的方法不会被调用</title>
      <link href="/2018/09/25/%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E6%97%B6%EF%BC%8C%E7%88%B6%E7%B1%BB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%B0%83%E7%94%A8%E8%A2%AB%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B0%83%E7%94%A8%E7%9A%84%E6%98%AF%E5%AD%90%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%80%8C%E8%A2%AB%E5%AD%90%E7%B1%BB%E9%87%8D%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%8D%E4%BC%9A%E8%A2%AB%E8%B0%83%E7%94%A8/"/>
      <url>/2018/09/25/%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E6%97%B6%EF%BC%8C%E7%88%B6%E7%B1%BB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%B0%83%E7%94%A8%E8%A2%AB%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B0%83%E7%94%A8%E7%9A%84%E6%98%AF%E5%AD%90%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E8%80%8C%E8%A2%AB%E5%AD%90%E7%B1%BB%E9%87%8D%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%8D%E4%BC%9A%E8%A2%AB%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_36819098/article/details/75146850" target="_blank" rel="noopener">原文链接</a><br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Basic add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Basic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        add(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>问题：为什么创建A对象的时候父类会调用子类方法，但是创建B对象父类会调用父类的方法？</em></p><blockquote><p>当子类被加载到内存方法区后，会继续加载父类到内存中。如果，子类重写了父类的方法，子类的方法引用会指向子类的方法，否则子类的方法引用会指向父类的方法引用。如果子类重载了父类的方法，则子类重载方法引用还指向子类方法。如果子类方法没有重写也没有重载父类方法，则方法引用会指向父类方法。</p></blockquote></blockquote><p>当子类对象创建时，会先行调用父类的构造方法（构造方法也是方法），虚拟机会在子类方法区寻找该方法并运行。但是由于 <strong>Java语言时静态多分派，动态单分派。</strong> 其结果是当编译的时候，父类构造方法调用的方法的参数已经强制转换为符合父类的参数了。上边的代码在编译前已经转换为下面的这个样子了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Basic add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Basic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        add((<span class="keyword">int</span>)<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Basic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B add"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>附上牛客上的一道<a href="https://www.nowcoder.com/test/question/done?tid=18948502&amp;qid=164331#summary" target="_blank" rel="noopener">相关题目</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Test.main()函数执行后的输出是（）</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> B().getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">A</span> <span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            setValue(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                value ++;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setValue(value);</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="number">5</span>);</span><br><span class="line">            setValue(getValue() -<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.setValue(<span class="number">2</span> * value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果 22 34 17</p></blockquote><p>函数调用过程：</p><blockquote><p>-&gt;new B() -&gt;[super(5)(显示调用父类)-&gt;setValue(5)-&gt;(调用子类重写的的setValue(5)-&gt;super.setValue(10)-&gt; this.value= 10)<br>-&gt;[setValue(getValue()-3){setValue([getValue()(调用父类的方法) value++(value = 11,return value = 11),执行finally{this.setValue(11)调用子类的setValue(11)-&gt;(super.setValue(22) <strong>System.out.println(22))</strong><br>-&gt;[setValue(11-3)(return 的是11)]setValue(8) -&gt;super.setValue(2 <em> 8) )-&gt;super.setValue(16) this.value = 16;<br>-&gt;(new B()).getValue())-&gt;value ++-&gt;return value; return value值(value=17)-&gt;finally (this.setValue(17 </em> 2) <strong>System.out.println(34))</strong><br>-&gt;System.out.print(new B().getValue)); <strong>System.out.println(17)</strong></p></blockquote><p><em>注意⚠️ finally语句块在return之前执行</em></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mastering-Go笔记三</title>
      <link href="/2018/09/19/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%89w/"/>
      <url>/2018/09/19/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%89w/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>本文主要通过 <code>Masting Go</code> 一书第三章学习Go语言基本数据类型等知识。</p><p><code>for loop</code> 实例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    exp := <span class="literal">true</span></span><br><span class="line">    <span class="comment">// like while true</span></span><br><span class="line">    <span class="keyword">for</span> ok := <span class="literal">true</span>; ok; ok = exp &#123;</span><br><span class="line">        fmt.Println(count)</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">10</span> &#123;</span><br><span class="line">            exp = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"******"</span>)</span><br><span class="line"></span><br><span class="line">    array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> index, num := <span class="keyword">range</span> array &#123;</span><br><span class="line">        fmt.Println(index, num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go的数组，类似Python的tuple，不可变:</p><blockquote><p>Go arrays have many disadvantages that will make you reconsider using them in your Go<br>projects. First of all, once you define an array, you cannot change its size, which means that<br>Go arrays are not dynamic. Putting it simply, if you need to add an element to an existing<br>array that has no space left, you will need to create a bigger array and copy all of the<br>elements of the old array to the new one. Second, when you pass an array to a function as a<br>parameter, you actually pass a copy of the array, which means that any changes you make<br>to an array inside a function will be lost after the function exits. Last, passing a large array<br>to a function can be pretty slow, mostly because Go has to create a copy of the array. The<br>solution to all of these problems is to use Go slices, which will be presented in the next<br>section.</p></blockquote><p>数组的大小固定的，而且作为参数传递的话，传的是数组的copy，可能会比较慢，而且在函数内部改变了数组，外部不会更新，<br>也就是说，函数内部无法修改数组内元素:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change_array</span><span class="params">(x [5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(x[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    change_array(array)</span><br><span class="line">    fmt.Println(array)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，很少使用数组，而是使用 <code>slice</code> :</p><blockquote><p>Slices are implemented using arrays internally, which means that Go uses<br>an underlying array for each slice.</p></blockquote><p>切片内部是使用数组实现的。切片当做参数时，传递的是内存地址，而不是copy，因此可以在函数内部改变切片的值。</p><p>定义切片，类似数组，但是不加长度:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aSliceLiteral := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>也可以通过 <code>make</code> 函数定义切片:</p><blockquote><p>there is also the make() function that allows you to create empty slices with the<br>desired length and capacity as the parameters passed to make().</p></blockquote><p>通过 <code>append</code> 函数添加元素:</p><blockquote><p>You can add an element to the slice, which will automatically increase its size, using the<br>append() function.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    array := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">    s1 := array[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Println(array)</span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">    <span class="comment">// change re-slice, change original relice</span></span><br><span class="line">    s1[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">    fmt.Println(array)</span><br><span class="line">    fmt.Println(s1)</span><br><span class="line">    <span class="comment">// append a number</span></span><br><span class="line">    array = <span class="built_in">append</span>(array, <span class="number">9</span>)</span><br><span class="line">    fmt.Println(array)</span><br><span class="line">    fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Slices have two main properties: capacity and length. The tricky part is that usually these<br>two properties have different values. The length of a slice is the same as the length of an<br>array with the same number of elements and can be found using the len() function. The<br>capacity of a slice is the current room that has been allocated for this particular slice, and it<br>can be found with the cap() function. As slices are dynamic in size, if a slice runs out of<br>room, Go automatically doubles its current length to make room for more elements.</p></blockquote><p><code>capacity</code> 表示当前切片容量，会自动根据 <code>length</code> 的长度扩容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print_slice</span><span class="params">(x []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">    fmt.Printf(<span class="string">"Cap: %d, Length: %d\n"</span>, <span class="built_in">cap</span>(x), <span class="built_in">len</span>(x))</span><br><span class="line">    fmt.Println(<span class="string">"*****"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    aSlice := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">4</span>&#125;</span><br><span class="line">    print_slice(aSlice)</span><br><span class="line"></span><br><span class="line">    aSlice = <span class="built_in">append</span>(aSlice, <span class="number">-100</span>)</span><br><span class="line">    print_slice(aSlice)</span><br><span class="line"></span><br><span class="line">    aSlice = <span class="built_in">append</span>(aSlice, <span class="number">-2</span>)</span><br><span class="line">    aSlice = <span class="built_in">append</span>(aSlice, <span class="number">-3</span>)</span><br><span class="line">    aSlice = <span class="built_in">append</span>(aSlice, <span class="number">-4</span>)</span><br><span class="line">    print_slice(aSlice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-1 0 4]</span><br><span class="line">Cap: 3, Length: 3</span><br><span class="line">*****</span><br><span class="line">[-1 0 4 -100]</span><br><span class="line">Cap: 6, Length: 4</span><br><span class="line">*****</span><br><span class="line">[-1 0 4 -100 -2 -3 -4]</span><br><span class="line">Cap: 12, Length: 7</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>未初始化的 slice 的值都是0:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print_slice</span><span class="params">(x []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">    fmt.Printf(<span class="string">"Cap: %d, Length: %d\n"</span>, <span class="built_in">cap</span>(x), <span class="built_in">len</span>(x))</span><br><span class="line">    fmt.Println(<span class="string">"*****"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    aSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">    print_slice(aSlice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>copy()</code> 函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print_slice</span><span class="params">(x []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">    fmt.Printf(<span class="string">"Cap: %d, Length: %d\n"</span>, <span class="built_in">cap</span>(x), <span class="built_in">len</span>(x))</span><br><span class="line">    fmt.Println(<span class="string">"*****"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a6 := []<span class="keyword">int</span>&#123;<span class="number">-10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    a4 := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>&#125;</span><br><span class="line">    print_slice(a6)</span><br><span class="line">    print_slice(a4)</span><br><span class="line">    <span class="comment">// copy(dst, src)</span></span><br><span class="line">    <span class="built_in">copy</span>(a6, a4)</span><br><span class="line">    print_slice(a6)</span><br><span class="line">    print_slice(a4)</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// only the first four elements of b6 will be copied to b4 because b4 has only four</span></span><br><span class="line">    <span class="comment">// elements.</span></span><br><span class="line">    b6 := []<span class="keyword">int</span>&#123;<span class="number">-10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b4 := []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>&#125;</span><br><span class="line">    print_slice(b6)</span><br><span class="line">    print_slice(b4)</span><br><span class="line">    <span class="built_in">copy</span>(b4, b6)</span><br><span class="line">    print_slice(a6)</span><br><span class="line">    print_slice(a4)</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line">    array4 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">-4</span>, <span class="number">4</span>, <span class="number">-4</span>&#125;</span><br><span class="line">    s6 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-5</span>&#125;</span><br><span class="line">    <span class="comment">// array is converted to a slice with the help of the [:] notation (array4[0:]).</span></span><br><span class="line">    <span class="built_in">copy</span>(s6, array4[<span class="number">0</span>:])</span><br><span class="line"></span><br><span class="line">    print_slice(s6)</span><br><span class="line">    print_slice(array4[<span class="number">0</span>:])</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">    array5 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">-5</span>, <span class="number">5</span>, <span class="number">-5</span>, <span class="number">5</span>&#125;</span><br><span class="line">    s7 := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">7</span>, <span class="number">-7</span>, <span class="number">-7</span>, <span class="number">7</span>, <span class="number">-7</span>, <span class="number">7</span>&#125;</span><br><span class="line">    <span class="built_in">copy</span>(array5[<span class="number">0</span>:], s7)</span><br><span class="line">    print_slice(array5[<span class="number">0</span>:])</span><br><span class="line">    print_slice(s7)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[-10 1 2 3 4 5]</span><br><span class="line">Cap: 6, Length: 6</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4]</span><br><span class="line">Cap: 4, Length: 4</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4 4 5]</span><br><span class="line">Cap: 6, Length: 6</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4]</span><br><span class="line">Cap: 4, Length: 4</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">[-10 1 2 3 4 5]</span><br><span class="line">Cap: 6, Length: 6</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4]</span><br><span class="line">Cap: 4, Length: 4</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4 4 5]</span><br><span class="line">Cap: 6, Length: 6</span><br><span class="line">*****</span><br><span class="line">[-1 -2 -3 -4]</span><br><span class="line">Cap: 4, Length: 4</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">[4 -4 4 -4 5 -5]</span><br><span class="line">Cap: 6, Length: 6</span><br><span class="line">*****</span><br><span class="line">[4 -4 4 -4]</span><br><span class="line">Cap: 4, Length: 4</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">[7 7 -7 -7 7]</span><br><span class="line">Cap: 5, Length: 5</span><br><span class="line">*****</span><br><span class="line">[7 7 -7 -7 7 -7 7]</span><br><span class="line">Cap: 7, Length: 7</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>使用 <code>nil</code> 置空一个slice:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print_slice</span><span class="params">(x []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">    fmt.Printf(<span class="string">"Cap: %d, Length: %d\n"</span>, <span class="built_in">cap</span>(x), <span class="built_in">len</span>(x))</span><br><span class="line">    fmt.Println(<span class="string">"*****"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a6 := []<span class="keyword">int</span>&#123;<span class="number">-10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    print_slice(a6)</span><br><span class="line">    a6 = <span class="literal">nil</span></span><br><span class="line">    print_slice(a6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>sort.slice</code> 排序slice:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name   <span class="keyword">string</span></span><br><span class="line">    height <span class="keyword">int</span></span><br><span class="line">    weight <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mySlice := <span class="built_in">make</span>([]person, <span class="number">0</span>)</span><br><span class="line">    mySlice = <span class="built_in">append</span>(mySlice, person&#123;<span class="string">"Mihalis"</span>, <span class="number">180</span>, <span class="number">90</span>&#125;)</span><br><span class="line">    mySlice = <span class="built_in">append</span>(mySlice, person&#123;<span class="string">"Bill"</span>, <span class="number">134</span>, <span class="number">45</span>&#125;)</span><br><span class="line">    mySlice = <span class="built_in">append</span>(mySlice, person&#123;<span class="string">"Marietta"</span>, <span class="number">155</span>, <span class="number">45</span>&#125;)</span><br><span class="line">    mySlice = <span class="built_in">append</span>(mySlice, person&#123;<span class="string">"Epifanios"</span>, <span class="number">144</span>, <span class="number">50</span>&#125;)</span><br><span class="line">    mySlice = <span class="built_in">append</span>(mySlice, person&#123;<span class="string">"Athina"</span>, <span class="number">134</span>, <span class="number">40</span>&#125;)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"0:"</span>, mySlice)</span><br><span class="line">    sort.Slice(mySlice, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mySlice[i].height &lt; mySlice[j].height</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(<span class="string">"order by height"</span>, mySlice)</span><br><span class="line"></span><br><span class="line">    sort.Slice(mySlice, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mySlice[i].height &gt; mySlice[j].height</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(<span class="string">"order by height desc"</span>, mySlice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go</span><br><span class="line">0: [&#123;Mihalis 180 90&#125; &#123;Bill 134 45&#125; &#123;Marietta 155 45&#125; &#123;Epifanios 144 50&#125; &#123;Athina 134 40&#125;]</span><br><span class="line">order by height [&#123;Bill 134 45&#125; &#123;Athina 134 40&#125; &#123;Epifanios 144 50&#125; &#123;Marietta 155 45&#125; &#123;Mihalis 180 90&#125;]</span><br><span class="line">order by height desc [&#123;Mihalis 180 90&#125; &#123;Marietta 155 45&#125; &#123;Epifanios 144 50&#125; &#123;Bill 134 45&#125; &#123;Athina 134 40&#125;]</span><br></pre></td></tr></table></figure><p>Go语言的<code>map</code>, 类似Python的 dict:</p><blockquote><p>A Go map is equivalent to the well-known hash table found in many other programming<br>languages. The main advantage of maps is that they can use any data type as their index,<br>which in this case is called a map key or just a key. Although Go maps do not exclude any<br>data types from being used as keys, for a data type to be used as a key, it must be<br>comparable, which means that the Go compiler must be able to differentiate one key from<br>another or, put simply, that the keys of a map must support the == operator.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    iMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    iMap[<span class="string">"k1"</span>] = <span class="number">12</span></span><br><span class="line">    iMap[<span class="string">"k2"</span>] = <span class="number">14</span></span><br><span class="line">    fmt.Println(<span class="string">"iMap"</span>, iMap)</span><br><span class="line"></span><br><span class="line">    anotherMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">        <span class="string">"k1"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">"k2"</span>: <span class="number">13</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"anotherMap:"</span>, anotherMap)</span><br><span class="line">    <span class="built_in">delete</span>(anotherMap, <span class="string">"k1"</span>)</span><br><span class="line">    <span class="built_in">delete</span>(anotherMap, <span class="string">"k1"</span>)</span><br><span class="line">    <span class="built_in">delete</span>(anotherMap, <span class="string">"k1"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"anotherMap:"</span>, anotherMap)</span><br><span class="line"></span><br><span class="line">    _, ok := iMap[<span class="string">"doesItExist"</span>]</span><br><span class="line">    fmt.Println(ok)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Exists!"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Does NOT exist"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go常量</p><blockquote><p>Go supports constants, which are variables that cannot change their values. Constants in Go<br>are defined with the help of the const keyword. Generally speaking,<br>constants are usually global variables.<br>Strictly speaking, the value of a constant variable is defined at compile time-not at run time.</p></blockquote><p>常量通常用作全局变量。严格地说，常量是在编译时定义的而不是运行时。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">"chenwen"</span></span><br><span class="line">    fmt.Println(name)</span><br><span class="line">    name = <span class="string">"lee"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法修改 <code>const</code> 定义的变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">./temp.go:10:7: cannot assign to name</span><br></pre></td></tr></table></figure><p>使用 <code>iota</code> 可以定义一个常量生成器:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Digit <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        Zero Digit = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">        One</span><br><span class="line">        Two</span><br><span class="line">        Three</span><br><span class="line">        Four</span><br><span class="line">        _</span><br><span class="line">        Five</span><br><span class="line">    )</span><br><span class="line">    fmt.Println(<span class="string">"One"</span>, One)</span><br><span class="line">    fmt.Println(<span class="string">"Two"</span>, Two)</span><br><span class="line">    fmt.Println(<span class="string">"Five"</span>, Five)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1，定义 周一~周日的常量:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sunday);</span><br><span class="line">    fmt.Println(Friday);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go指针</p><p>Go语言支持指针，和C语言指针类似</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPointer</span><span class="params">(n *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *n = *n * *n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnPointer</span><span class="params">(n <span class="keyword">int</span>)</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">    v := n * n</span><br><span class="line">    <span class="keyword">return</span> &amp;v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">-10</span></span><br><span class="line">    j := <span class="number">25</span></span><br><span class="line">    pI := &amp;i</span><br><span class="line">    pJ := &amp;j</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"pI memory:"</span>, pI)</span><br><span class="line">    fmt.Println(<span class="string">"pJ memory:"</span>, pJ)</span><br><span class="line">    fmt.Println(<span class="string">"pI value:"</span>, *pI)</span><br><span class="line">    fmt.Println(<span class="string">"pJ value:"</span>, *pJ)</span><br><span class="line"></span><br><span class="line">    *pI = <span class="number">123456</span></span><br><span class="line">    *pI--</span><br><span class="line">    fmt.Println(<span class="string">"i:"</span>, i)</span><br><span class="line"></span><br><span class="line">    getPointer(pJ)</span><br><span class="line">    fmt.Println(<span class="string">"j:"</span>, j)</span><br><span class="line"></span><br><span class="line">    k := returnPointer(<span class="number">12</span>)</span><br><span class="line">    fmt.Println(*k)</span><br><span class="line">    fmt.Println(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Strings in Go are value types, not pointers as in C.</p></blockquote><p>字符串是值类型，而不是C语言的指针。</p><p>使用Go处理时间，常用的函数比如 获取 类似 <code>2000-01-01 00:00:00</code> 和 Unix时间戳的函数如下:</p><p>Go时间相关方法</p><p>比较时间相差秒数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 比较时间相差秒数</span></span><br><span class="line">    t := time.Now()</span><br><span class="line">    int1 := time.Now().Unix()</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    t1 := time.Now()</span><br><span class="line">    fmt.Println(<span class="string">"Time difference:"</span>, t1.Sub(t))</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line">    int2 := time.Now().Unix()</span><br><span class="line">    fmt.Println(<span class="string">"difference is "</span>, int2 - int1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:</p><p><a href="https://golang.org/pkg/time/" target="_blank" rel="noopener">https://golang.org/pkg/time/</a><br><a href="https://juejin.im/post/5a9f543a6fb9a028cb2d2b91" target="_blank" rel="noopener">https://juejin.im/post/5a9f543a6fb9a028cb2d2b91</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Latency Numbers Every Programmer Should Know </title>
      <link href="/2018/09/19/Latency-Numbers-Every-Programmer-Should-Know/"/>
      <url>/2018/09/19/Latency-Numbers-Every-Programmer-Should-Know/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>Latency Numbers Every Programmer Should Know</p><p>计算机常用时间概念:</p><p>1秒=1000毫秒(ms),1毫秒=1／1000秒(s)；<br>1秒=1000000 微秒(μs),1微秒=1／1000000秒(s)；<br>1秒=1000000000 纳秒(ns),1纳秒=1／1000000000秒(s)；<br>1秒=1000000000000 皮秒(ps),1皮秒=1/1000000000000秒.</p><p>常见操作耗时:</p><table><thead><tr><th>ns</th><th>μs</th><th>ms</th></tr></thead><tbody><tr><td>10^-9 second</td><td>10^-6 second</td><td>10^-3 second</td></tr><tr><td>L1 cache reference: 1ns</td><td>Compress 1KB with Zippy: 2μs</td><td>Disk seek: 3ms</td></tr><tr><td>Branch mispredict: 3ns</td><td>Read 1,000,000 bytes sequentially from memory: 5μs</td><td>Read 1,000,000 bytes sequentially from disk: 1ms</td></tr><tr><td>L2 cache reference: 4ns</td><td>SSD random read: 16μs</td><td>Pakcet RT CA to Netherlands: 150ms</td></tr><tr><td>Mutex lock/unlock: 17ns</td><td>Read 1,000,000 bytes sequentially from SSD: 78μs</td><td></td></tr><tr><td>Send 2000 bytes over commodity network: 88ns</td><td>RT in same datacenter: 500μs</td><td></td></tr><tr><td>Main memory reference: 100ns</td><td></td></tr></tbody></table><p>一般网络ping时延中 10ms 左右基本可以认为同城，超过10ms的部分每1ms，粗略可以换成60KM.</p><p>参考:</p><p><a href="https://www.zybang.com/question/e7342b2c5de0e931f547d3d309dce1ca.html" target="_blank" rel="noopener">https://www.zybang.com/question/e7342b2c5de0e931f547d3d309dce1ca.html</a><br><a href="https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html" target="_blank" rel="noopener">https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html</a><br><a href="https://medium.com/@hondanhon/more-latency-numbers-every-programmer-should-know-3142f0cf614d" target="_blank" rel="noopener">https://medium.com/@hondanhon/more-latency-numbers-every-programmer-should-know-3142f0cf614d</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>简单算法题</title>
      <link href="/2018/09/19/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%E9%A2%98/"/>
      <url>/2018/09/19/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="一个简单的问题"><a href="#一个简单的问题" class="headerlink" title="一个简单的问题"></a>一个简单的问题</h2><p>前几天参加面试培训，遇到这样一个问题:</p><p>给定一行log文件，比如:</p><p><code>Master   &quot;  Python &quot;    &quot; 2018-01-01 00:00:00 &quot;    curl      /api/v1/test</code></p><p>要求按照空格分割，如果遇到分号，分号里面的保留不变。<br>输出这样的列表: <code>[&#39;Master&#39;, &#39;&quot;  Python &quot;&#39;, &#39;&quot; 2018-01-01 00:00:00 &quot;&#39;, &#39;curl&#39;, &#39;/api/v1/test&#39;]</code></p><p>这个问题不难，可以先从没有双引号的情况考虑:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_string</span><span class="params">(text)</span>:</span></span><br><span class="line">    words = []</span><br><span class="line">    word = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> c != <span class="string">' '</span>:</span><br><span class="line">            word += c</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> word:</span><br><span class="line">                words.append(word)</span><br><span class="line">            word = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> word:</span><br><span class="line">        words.append(word)</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_1 = <span class="string">'aa bb      cc     d   d   e'</span></span><br><span class="line">    test_2 = <span class="string">'aa bb      cc     d   d   e  '</span></span><br><span class="line"></span><br><span class="line">    print(split_string(test_1))</span><br><span class="line">    print(split_string(test_2))</span><br></pre></td></tr></table></figure><p>加入双引号的情况:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_string1</span><span class="params">(text)</span>:</span></span><br><span class="line"></span><br><span class="line">    words = []</span><br><span class="line">    word = <span class="string">''</span></span><br><span class="line">    in_quotes = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> in_quotes:</span><br><span class="line">            <span class="keyword">if</span> c != <span class="string">' '</span> <span class="keyword">and</span> c != <span class="string">'"'</span>:</span><br><span class="line">                word += c</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">                <span class="keyword">if</span> word:</span><br><span class="line">                    words.append(word)</span><br><span class="line">                word = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">'"'</span>:</span><br><span class="line">                word += c</span><br><span class="line">                in_quotes = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word += c</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">'"'</span>:</span><br><span class="line">                in_quotes = <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># 处理最后一个字符串</span></span><br><span class="line">    <span class="keyword">if</span> word:</span><br><span class="line">        words.append(word)</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_1 = <span class="string">'Master   "  Python "    " 2018-01-01 00:00:00 "    curl      /api/v1/test  '</span></span><br><span class="line">    test_2 = <span class="string">'aa bb      cc     d   d   e  '</span></span><br><span class="line"></span><br><span class="line">    print(split_string1(test_1))</span><br><span class="line">    print(split_string1(test_2))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>proc文件系统入门</title>
      <link href="/2018/09/19/proc%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2018/09/19/proc%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>/proc 文件系统简要介绍</p><ol start="0"><li>man 5 proc 查看proc基础知识</li></ol><p>先通过 <code>man</code> 大概了解一下 <code>/proc</code> 文件系统</p><blockquote><p>proc - process information pseudo-file system</p></blockquote><blockquote><p>The proc file system is a pseudo-file system which is used as an interface to kernel data structures.<br>  It is commonly mounted at /proc.  Most of it is read-only, but some files allow kernel variables to be changed.</p></blockquote><p>对每个进程号(pid), 都有一个 /proc/[pid] 文件, 可以通过一个具体进程, 从 /proc 系统中获取一些信息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  fd = open(<span class="string">'/proc/version'</span>)</span><br><span class="line">  print(sys.argv[:])</span><br><span class="line">  time.sleep(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><p>运行进程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup python -u test.py 0 1 2 3 4 5 6 7 8 9 10 &amp;</span><br></pre></td></tr></table></figure><p>得到进程id是 <code>27894</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep python</span><br><span class="line">vagrant  27894  0.0  0.2 118000  4560 pts/1    SN   19:52   0:00 python -u test.py 0 1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/fd</code> 查看进程打开文件句柄:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ll /proc/27894/fd</span><br><span class="line">总用量 0</span><br><span class="line">l-wx------ 1 vagrant vagrant 64 9月  17 19:57 0 -&gt; /dev/null</span><br><span class="line">l-wx------ 1 vagrant vagrant 64 9月  17 19:57 1 -&gt; /home/admin/nohup.out</span><br><span class="line">l-wx------ 1 vagrant vagrant 64 9月  17 19:52 2 -&gt; /home/admin/nohup.out</span><br><span class="line">lr-x------ 1 vagrant vagrant 64 9月  17 19:57 3 -&gt; /proc/version</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/cmdline</code> 文件查看进程运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ more /proc/27894/cmdline </span><br><span class="line">python</span><br></pre></td></tr></table></figure><blockquote><p>This  holds the complete command line for the process, unless the process is a zombie.<br> In the lattercase, there is nothing in this file: that is, a read on this file will return 0 characters.</p></blockquote><p>僵尸进程会返回0个字符。</p><p>通过 <code>/proc/[pid]/cwd</code> 查看进程运行目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /proc/27894/cwd; /bin/<span class="built_in">pwd</span></span><br><span class="line">/home/admin</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/environ</code> 查看进程运行时的环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ (cat /proc/27894/environ; <span class="built_in">echo</span>) | tr <span class="string">'\000'</span> <span class="string">'\n'</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">USER=vagrant</span><br><span class="line">LOGNAME=vagrant</span><br><span class="line">HOME=/home/vagrant</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/bin:/usr/bin:/home/vagrant/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/sbin:/opt/dell/srvadmin/bin</span><br><span class="line">MAIL=/var/spool/mail/vagrant</span><br><span class="line">SHELL=/bin/zsh</span><br><span class="line">SSH_CLIENT=10.0.2.2 52273 22</span><br><span class="line">SSH_CONNECTION=10.0.2.2 52273 10.0.2.15 22</span><br><span class="line">SSH_TTY=/dev/pts/1</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">SHLVL=1</span><br><span class="line">PWD=/home/admin</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/exe</code> 查看 运行命令的 实际路径:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll /proc/27894/exe </span><br><span class="line">lrwxrwxrwx 1 vagrant vagrant 0 9月  17 19:56 /proc/27894/exe -&gt; /usr/<span class="built_in">local</span>/bin/python2.7</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/fdinfo/</code> 查看进程 打开的文件句柄号，以及文件句柄的权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ll /proc/27894/fdinfo </span><br><span class="line">总用量 0</span><br><span class="line">-r-------- 1 vagrant vagrant 0 9月  17 15:24 0</span><br><span class="line">-r-------- 1 vagrant vagrant 0 9月  17 15:24 1</span><br><span class="line">-r-------- 1 vagrant vagrant 0 9月  17 15:24 2</span><br><span class="line">-r-------- 1 vagrant vagrant 0 9月  17 15:24 3</span><br><span class="line"></span><br><span class="line">$ ll /proc/27894/fdinfo/1</span><br><span class="line">-r-------- 1 vagrant vagrant 0 9月  17 15:24 /proc/27894/fdinfo/1</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/limits</code> 查看系统对进程资源的限制:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ more /proc/27894/limits  </span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units     </span><br><span class="line">Max cpu time              unlimited            unlimited            seconds   </span><br><span class="line">Max file size             unlimited            unlimited            bytes     </span><br><span class="line">Max data size             unlimited            unlimited            bytes     </span><br><span class="line">Max stack size            10485760             unlimited            bytes     </span><br><span class="line">Max core file size        0                    unlimited            bytes     </span><br><span class="line">Max resident <span class="built_in">set</span>          unlimited            unlimited            bytes     </span><br><span class="line">Max processes             1024                 7231                 processes </span><br><span class="line">Max open files            1024                 4096                 files     </span><br><span class="line">Max locked memory         65536                65536                bytes     </span><br><span class="line">Max address space         unlimited            unlimited            bytes     </span><br><span class="line">Max file locks            unlimited            unlimited            locks     </span><br><span class="line">Max pending signals       7231                 7231                 signals   </span><br><span class="line">Max msgqueue size         819200               819200               bytes     </span><br><span class="line">Max nice priority         0                    0                    </span><br><span class="line">Max realtime priority     0                    0                    </span><br><span class="line">Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure><p>通过 查看进程映射的内存区域和权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ more /proc/27894/maps    </span><br><span class="line">00400000-0057b000 r-xp 00000000 fd:00 12593139                           /usr/<span class="built_in">local</span>/bin/python2.7</span><br><span class="line">0077a000-007b6000 rw-p 0017a000 fd:00 12593139                           /usr/<span class="built_in">local</span>/bin/python2.7</span><br><span class="line">007b6000-007d7000 rw-p 00000000 00:00 0 </span><br><span class="line">02571000-0264b000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">7f60b5b33000-7f60b5b37000 r-xp 00000000 fd:00 267468                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/time.so</span><br><span class="line">7f60b5b37000-7f60b5d36000 ---p 00004000 fd:00 267468                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/time.so</span><br><span class="line">7f60b5d36000-7f60b5d38000 rw-p 00003000 fd:00 267468                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/time.so</span><br><span class="line">7f60b5d38000-7f60bbbcc000 r--p 00000000 fd:00 12601160                   /usr/lib/locale/locale-archive</span><br><span class="line">7f60bbbcc000-7f60bbbd0000 r-xp 00000000 fd:00 267440                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/_locale.so</span><br><span class="line">7f60bbbd0000-7f60bbdd0000 ---p 00004000 fd:00 267440                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/_locale.so</span><br><span class="line">7f60bbdd0000-7f60bbdd1000 rw-p 00004000 fd:00 267440                     /usr/<span class="built_in">local</span>/lib/python2.7/lib-dynload/_locale.so</span><br><span class="line">7f60bbdd1000-7f60bbf5c000 r-xp 00000000 fd:00 11796490                   /lib64/libc-2.12.so</span><br><span class="line">7f60bbf5c000-7f60bc15b000 ---p 0018b000 fd:00 11796490                   /lib64/libc-2.12.so</span><br><span class="line">7f60bc15b000-7f60bc15f000 r--p 0018a000 fd:00 11796490                   /lib64/libc-2.12.so</span><br><span class="line">7f60bc15f000-7f60bc161000 rw-p 0018e000 fd:00 11796490                   /lib64/libc-2.12.so</span><br><span class="line">7f60bc161000-7f60bc165000 rw-p 00000000 00:00 0 </span><br><span class="line">7f60bc165000-7f60bc1e8000 r-xp 00000000 fd:00 11796518                   /lib64/libm-2.12.so</span><br><span class="line">7f60bc1e8000-7f60bc3e7000 ---p 00083000 fd:00 11796518                   /lib64/libm-2.12.so</span><br><span class="line">7f60bc3e7000-7f60bc3e8000 r--p 00082000 fd:00 11796518                   /lib64/libm-2.12.so</span><br><span class="line">7f60bc3e8000-7f60bc3e9000 rw-p 00083000 fd:00 11796518                   /lib64/libm-2.12.so</span><br><span class="line">7f60bc3e9000-7f60bc3eb000 r-xp 00000000 fd:00 11796598                   /lib64/libutil-2.12.so</span><br><span class="line">7f60bc3eb000-7f60bc5ea000 ---p 00002000 fd:00 11796598                   /lib64/libutil-2.12.so</span><br></pre></td></tr></table></figure><blockquote><p>where “address” is the address space in the process that it occupies, “perms” is  a  set  of  permis-sions:<br>  r = read<br>  w = write<br>  x = execute<br>  s = shared<br>  p = private (copy on write)</p></blockquote><p>通过 <code>/proc/[pid]/mountinfo</code> 查看挂载点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ more /proc/27894/mountinfo</span><br><span class="line">15 20 0:3 / /proc rw,relatime - proc proc rw</span><br><span class="line">16 20 0:0 / /sys rw,relatime - sysfs sysfs rw</span><br><span class="line">17 20 0:5 / /dev rw,relatime - devtmpfs devtmpfs rw,size=925684k,nr_inodes=231421,mode=755</span><br><span class="line">18 17 0:11 / /dev/pts rw,relatime - devpts devpts rw,gid=5,mode=620,ptmxmode=000</span><br><span class="line">19 17 0:15 / /dev/shm rw,relatime - tmpfs tmpfs rw,size=936436k,nr_inodes=234109</span><br><span class="line">20 1 253:0 / / rw,relatime - ext4 /dev/mapper/VolGroup-lv_root rw,barrier=1,data=ordered</span><br><span class="line">21 15 0:16 / /proc/bus/usb rw,relatime - usbfs /proc/bus/usb rw</span><br><span class="line">22 20 8:1 / /boot rw,relatime - ext4 /dev/sda1 rw,barrier=1,data=ordered</span><br><span class="line">23 15 0:17 / /proc/sys/fs/binfmt_misc rw,relatime - binfmt_misc none rw</span><br><span class="line">24 20 0:18 / /var/lib/nfs/rpc_pipefs rw,relatime - rpc_pipefs sunrpc rw</span><br><span class="line">26 20 0:19 / /home/admin rw,relatime - nfs 11.11.11.1:/Users/leeyang/VBox/app rw,vers=3,rsize=8192,wsize=8192,namlen=255,hard,pr</span><br><span class="line">oto=udp,timeo=11,retrans=3,sec=sys,mountaddr=11.11.11.1,mountvers=3,mountport=787,mountproto=udp,local_lock=none,addr=11.11.11.1</span><br><span class="line">27 20 0:20 / /vagrant rw,nodev,relatime - vboxsf vagrant rw</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/[pid]/status</code> 查看进程状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ more  /proc/27894/status</span><br><span class="line">Name:   python</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   27894</span><br><span class="line">Pid:    27894</span><br><span class="line">PPid:   27036</span><br><span class="line">TracerPid:  0</span><br><span class="line">Uid:    500 500 500 500</span><br><span class="line">Gid:    500 500 500 500</span><br><span class="line">Utrace: 0</span><br><span class="line">FDSize: 64</span><br><span class="line">Groups: 10 500 </span><br><span class="line">VmPeak:   118004 kB</span><br><span class="line">VmSize:   118000 kB</span><br><span class="line">VmLck:         0 kB</span><br><span class="line">VmHWM:      4560 kB</span><br><span class="line">VmRSS:      4560 kB</span><br><span class="line">VmData:     2540 kB</span><br><span class="line">VmStk:        88 kB</span><br><span class="line">VmExe:      1516 kB</span><br><span class="line">VmLib:      2372 kB</span><br><span class="line">VmPTE:        84 kB</span><br><span class="line">VmSwap:        0 kB</span><br><span class="line">Threads:    1</span><br><span class="line">SigQ:   1/7231</span><br><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">SigBlk: 0000000000000000</span><br><span class="line">SigIgn: 0000000001001001</span><br><span class="line">SigCgt: 0000000180000002</span><br><span class="line">CapInh: 0000000000000000</span><br><span class="line">CapPrm: 0000000000000000</span><br><span class="line">CapEff: 0000000000000000</span><br><span class="line">CapBnd: ffffffffffffffff</span><br><span class="line">Cpus_allowed:   3</span><br><span class="line">Cpus_allowed_list:  0-1</span><br><span class="line">Mems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,0000</span><br><span class="line">0000,00000000,00000000,00000001</span><br><span class="line">Mems_allowed_list:  0</span><br><span class="line">voluntary_ctxt_switches:    4</span><br><span class="line">nonvoluntary_ctxt_switches: 6</span><br></pre></td></tr></table></figure><p>通过 <code>/proc/net</code> 目录下可以查看 网络相关的信息，这个里面的文件是文本文件，可以直接<code>cat</code> 出来:</p><blockquote><p>various net pseudo-files, all of which give the status of some part of the networking layer.  These<br>files contain ASCII structures and are, therefore, readable with cat(1).  However,  the  standard  net-<br>stat(8) suite provides much cleaner access to these files.</p></blockquote><p>比如可以查看网络设备，arp信息等:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vagrant @ chenwen in /proc/net [17:18:16]</span></span><br><span class="line">$ more /proc/net/dev</span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line"> face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">    lo:    1040      16    0    0    0     0          0         0     1040      16    0    0    0     0       0          0</span><br><span class="line">  eth0:  453742    5468    0    0    0     0          0         0   380875    3255    0    0    0     0       0          0</span><br><span class="line">  eth2:   39338      83    0    0    0     0          0         0    11532      88    0    0    0     0       0          0</span><br><span class="line"></span><br><span class="line"><span class="comment"># vagrant @ chenwen in /proc/net [17:18:23]</span></span><br><span class="line">$ more /proc/net/arp</span><br><span class="line">IP address       HW <span class="built_in">type</span>     Flags       HW address            Mask     Device</span><br><span class="line">10.0.2.3         0x1         0x2         52:54:00:12:35:03     *        eth0</span><br><span class="line">11.11.11.1       0x1         0x2         0a:00:27:00:00:03     *        eth2</span><br><span class="line">10.0.2.2         0x1         0x2         52:54:00:12:35:02     *        eth0</span><br></pre></td></tr></table></figure><ol><li>简要介绍</li></ol><p>使用 <code>mount</code> 命令查看 /proc 文件系统:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ mount</span><br><span class="line">/dev/mapper/VolGroup-lv_root on / <span class="built_in">type</span> ext4 (rw)</span><br><span class="line">proc on /proc <span class="built_in">type</span> proc (rw)</span><br><span class="line">sysfs on /sys <span class="built_in">type</span> sysfs (rw)</span><br><span class="line">devpts on /dev/pts <span class="built_in">type</span> devpts (rw,gid=5,mode=620)</span><br><span class="line">tmpfs on /dev/shm <span class="built_in">type</span> tmpfs (rw)</span><br><span class="line">/dev/sda1 on /boot <span class="built_in">type</span> ext4 (rw)</span><br><span class="line">none on /proc/sys/fs/binfmt_misc <span class="built_in">type</span> binfmt_misc (rw)</span><br><span class="line">sunrpc on /var/lib/nfs/rpc_pipefs <span class="built_in">type</span> rpc_pipefs (rw)</span><br><span class="line">11.11.11.1:/Users/leeyang/VBox/app on /home/admin <span class="built_in">type</span> nfs (rw,vers=3,udp,addr=11.11.11.1)</span><br><span class="line">vagrant on /vagrant <span class="built_in">type</span> vboxsf (uid=500,gid=500,rw)</span><br></pre></td></tr></table></figure><blockquote><p> /proc is a window into the running Linux kernel. Files in the /proc file system don’t correspond<br>to actual files on a physical device. Instead, they are magic objects that behave<br>like files but provide access to parameters, data structures, and statistics in the kernel.</p></blockquote><p>根据 /proc 文件查看系统信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ more /proc/version</span><br><span class="line">Linux version 2.6.32-696.3.1.el6.x86_64 (mockbuild@c1bl.rdu2.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) ) </span><br><span class="line"><span class="comment">#1 SMP Tue May 30 19:52:55 UTC 2017</span></span><br><span class="line"></span><br><span class="line">$ ls -l /proc/version</span><br><span class="line">-r--r--r-- 1 root root 0 9月  17 19:46 /proc/version</span><br></pre></td></tr></table></figure><p>注意这个文件的大小为0，其实并没有真正存在磁盘中，内容是由内核产生的。</p><p>从 /proc 中提取信息</p><p>查看CPU信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ more /proc/cpuinfo </span><br><span class="line">processor   : 0</span><br><span class="line">vendor_id   : GenuineIntel</span><br><span class="line">cpu family  : 6</span><br><span class="line">model       : 69</span><br><span class="line">model name  : Intel(R) Core(TM) i5-4260U CPU @ 1.40GHz</span><br><span class="line">stepping    : 1</span><br><span class="line">cpu MHz     : 1999.942</span><br><span class="line">cache size  : 3072 KB</span><br><span class="line">physical id : 0</span><br><span class="line">siblings    : 2</span><br><span class="line">core id     : 0</span><br><span class="line">cpu cores   : 2</span><br><span class="line">apicid      : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu     : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level : 13</span><br><span class="line">wp      : yes</span><br><span class="line">flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall n</span><br><span class="line">x rdtscp lm constant_tsc rep_good xtopology nonstop_tsc pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx rdrand</span><br><span class="line"> lahf_lm abm</span><br><span class="line">bogomips    : 3999.88</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 39 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><p>通过Python脚本获取信息，这里获取到 cpu MHz:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cpu_clock_speed</span><span class="params">()</span>:</span></span><br><span class="line">  fd = open(<span class="string">'/proc/cpuinfo'</span>)</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'cpu MHz'</span> <span class="keyword">in</span> line:</span><br><span class="line">      <span class="keyword">print</span> line.strip().split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  get_cpu_clock_speed()</span><br></pre></td></tr></table></figure><p><code>/proc/self</code> 文件</p><blockquote><p>The entry /proc/self is a symbolic link to<br>the /proc directory corresponding to the current process.The destination of the<br>/proc/self link depends on which process looks at it: Each process sees its own<br>process directory as the target of the link.</p></blockquote><p>通过 <code>/proc/self</code> 得到pid的实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.readlink(<span class="string">'/proc/self'</span>)</span><br><span class="line"><span class="string">'5004'</span></span><br></pre></td></tr></table></figure><p>关于 Process Argument List 进程参数列表</p><blockquote><p>The arguments are presented<br>as a single character string, with arguments separated by NULs(‘\0’).</p></blockquote><blockquote><p>NUL is the character with integer value 0. It’s different from NULL, which is a pointer with value 0.<br>In C and C++, NUL is expressed as the character constant ‘\0’, or (char) 0. </p></blockquote><p>参数以 <code>NUL</code> 分割，因此，可以直接使用指针</p><p>得到pid的进程的参数列表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_process_arg_list</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">24</span>];</span><br><span class="line">    <span class="keyword">char</span> arg_list[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">size_t</span> length;</span><br><span class="line">    <span class="keyword">char</span>* next_arg;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/%d/cmdline"</span>, (<span class="keyword">int</span>)pid);</span><br><span class="line">    fd = open(filename, O_RDONLY);</span><br><span class="line">    length = read(fd, arg_list, <span class="keyword">sizeof</span>(arg_list));</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    arg_list[length] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    next_arg = arg_list;</span><br><span class="line">    <span class="keyword">while</span> (next_arg &lt; arg_list + length) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, next_arg);</span><br><span class="line">        next_arg += <span class="built_in">strlen</span>(next_arg) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = (<span class="keyword">pid_t</span>)atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    print_process_arg_list(pid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取 <code>/proc/self/exe</code> 获取进程执行路径:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>link = <span class="string">'/proc/self/exe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.readlink(link)</span><br><span class="line"><span class="string">'/usr/local/bin/python2.7'</span></span><br></pre></td></tr></table></figure><p>读取 <code>/proc/sys/kernel/hostname</code> 查看主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more /proc/sys/kernel/hostname</span><br><span class="line">chenwen.zooer</span><br></pre></td></tr></table></figure><p>读取 <code>/proc/meminfo</code> 查看内存使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$  cat /proc/meminfo</span><br><span class="line">MemTotal:        2004972 kB</span><br><span class="line">MemFree:         1532528 kB</span><br><span class="line">Buffers:           83260 kB</span><br><span class="line">Cached:           111276 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:           303176 kB</span><br><span class="line">Inactive:          71656 kB</span><br><span class="line">Active(anon):     180320 kB</span><br><span class="line">Inactive(anon):      776 kB</span><br><span class="line">Active(file):     122856 kB</span><br><span class="line">Inactive(file):    70880 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       4194300 kB</span><br><span class="line">SwapFree:        4194300 kB</span><br><span class="line">Dirty:                 4 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        180416 kB</span><br><span class="line">Mapped:            13076 kB</span><br><span class="line">Shmem:               804 kB</span><br><span class="line">Slab:              58196 kB</span><br><span class="line">SReclaimable:      31664 kB</span><br><span class="line">SUnreclaim:        26532 kB</span><br></pre></td></tr></table></figure><p>可以看出 通过 <code>/proc</code> 伪文件系统, 可以获取到很多系统信息和进程信息。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>尾递归简介</title>
      <link href="/2018/09/19/%E5%B0%BE%E9%80%92%E5%BD%92%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/09/19/%E5%B0%BE%E9%80%92%E5%BD%92%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>尾调用是指一个函数里的最后一个动作是返回一个函数的调用结果的情形，即最后一步新调用的返回值直接被当前函数的返回结果。</p><p>尾调用中有一种重要而特殊的情形叫做尾递归。</p><p>尾调用 (tail call) 指的是一个函数的最后一条语句也是一个返回调用函数的语句。在函数体末尾被返回的可以是对另一个函数的调用，也可以是对自身调用（即自身递归调用）。</p><p>若函数在尾位置调用自身（或是一个尾调用本身的其他函数等等），则称这种情况为尾递归。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数。对尾递归的优化也是关注尾调用的主要原因。尾调用不一定是递归调用，但是尾递归特别有用，也比较容易实现。</p><p>尾递归在普通尾调用的基础上，多出了2个特征：</p><ol><li>在尾部调用的是函数自身 (Self-called)，不包括其他运算；</li><li>可通过优化，使得计算仅占用常量栈空间 (Stack Space)。</li></ol><p>关于尾递归，某几个有趣的回答:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail recursion /n./</span><br><span class="line"></span><br><span class="line">If you aren&apos;t sick of it already, see tail recursion.</span><br></pre></td></tr></table></figure><blockquote><p>In short, a tail recursion has the recursive call as the last statement in the function so that it doesn’t have to wait for the recursive call.</p></blockquote><blockquote><p>尾递归，比线性递归多一个参数，这个参数是上一次调用函数得到的结果；<br>所以，关键点在于，尾递归每次调用都在收集结果，避免了线性递归不收集结果只能依次展开消耗内存的坏处。</p></blockquote><p>以下Python代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recsum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x + recsum(x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">recsum(5)</span><br><span class="line">5 + recsum(4)</span><br><span class="line">5 + (4 + recsum(3))</span><br><span class="line">5 + (4 + (3 + recsum(2)))</span><br><span class="line">5 + (4 + (3 + (2 + recsum(1))))</span><br><span class="line">5 + (4 + (3 + (2 + 1)))</span><br><span class="line">5 + (4 + (3 + 3))</span><br><span class="line">5 + (4 + 6)</span><br><span class="line">5 + 10</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>改为尾递归:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailrecsum</span>(<span class="params">x, running_total=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> running_total;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tailrecsum(x - <span class="number">1</span>, running_total + x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tailrecsum(5, 0) </span><br><span class="line">tailrecsum(4, 5) </span><br><span class="line">tailrecsum(3, 9)</span><br><span class="line">tailrecsum(2, 12) </span><br><span class="line">tailrecsum(1, 14) </span><br><span class="line">tailrecsum(0, 15) </span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>汇编重组</p><p>对于直接生成汇编的编译器，尾部调用消除很简单：只要校正栈上的形参之后把 “call” 的机器码换成一个 “jump” 的就行了。从编译器的观点，以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先会被翻译成（这是合法的 x86 汇编）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:</span><br><span class="line"> call b</span><br><span class="line"> ret</span><br></pre></td></tr></table></figure><p>然后，尾部调用消除指的是将最后两个指令以一个 “jump” 指令替换掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:</span><br><span class="line"> jmp b</span><br></pre></td></tr></table></figure><p>在 b 函数完成的时候，它会直接返回到 a 的返回地址，省去了不必要的 ret 指令。</p><p>尾递归为什么可以优化?</p><p>尾递归的优化，一般是由编译器实现的，如果编译器没有优化，那么依然没有提高性能，比如Python对尾递归并没有优化。</p><p>参考：</p><p><a href="https://www.zhihu.com/question/20761771" target="_blank" rel="noopener">https://www.zhihu.com/question/20761771</a><br><a href="https://zhuanlan.zhihu.com/p/24305359" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24305359</a><br><a href="https://zhuanlan.zhihu.com/p/36587160" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36587160</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8</a><br><a href="https://stackoverflow.com/questions/33923/what-is-tail-recursion" target="_blank" rel="noopener">https://stackoverflow.com/questions/33923/what-is-tail-recursion</a><br><a href="https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion" target="_blank" rel="noopener">https://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用Lambda重构面向对象的设计模式</title>
      <link href="/2018/09/04/%E4%BD%BF%E7%94%A8Lambda%E9%87%8D%E6%9E%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/04/%E4%BD%BF%E7%94%A8Lambda%E9%87%8D%E6%9E%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>新的语言特性常常让现存的编程模式或设计黯然失色。比如，Java5中引入了for-each循环，由于它的稳定性和简洁性，已经替代了很多显式使用迭代器的情形。Java7中推出的菱形操作符（&lt;&gt;）让大家在创建实例时无需显式使用泛型，一定程度上推动了Java程序员们采用类型接口（type interface）进行程序设计。</p><p>对设计经验的归纳总结被称为<a href="http://wiki.c2.com/?GangOfFour" target="_blank" rel="noopener">设计模式</a>。设计软件时，可以复用这些方式方法来解决一些常见问题。这看起来像传统建筑工程师的工作方式，对典型的场景（比如悬挂桥、拱桥等）都定义有可重用的解决方案。例如，<em>访问者模式</em>常用于分离程序的算法和它的操作对象。<em>单例模式</em>一般用于限制类的实例化，仅生成一份对象。</p><p>Lambda表达式为程序员的工具箱又新添加了一件利器。它们为解决传统设计模式所面对的问题提供了新的解决方案，不但如此，采用这些方案往往更高效、更简单。使用Lambda表达式后，很多现存的略显臃肿的面向对象设计模式能够用更精简的方式实现了。针对五个设计模式展开讨论，分别是：</p><ul><li>策略模式</li><li>模板方法</li><li>观察者模式</li><li>责任链模式</li><li>工厂模式<br>接下来会展示Lambda表达式是如何另辟蹊径解决设计模式原来试图解决的问题的。<h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h2><a href="https://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">策略模式</a>代表了解决一类算法的通用解决方案，你可以在运行时选择使用哪种方案。<blockquote><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是&gt;“在美国交个人所得税”和“在中国交个人所得税”就有不同的算税方法。<br>策略模式：</p><ul><li>定义了一族算法（业务规则）； （代表算法的接口）</li><li>封装了每个算法； （一个或多个该接口的实现）</li><li>这族的算法可互换代替（interchangeable）。</li></ul></blockquote></li></ul><p>从定义一个验证文本（以String的形式表示）的接口入手：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次，定义了该接口的一个或多个具体实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAllLowerCase</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.matches(<span class="string">"[a-z]+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNumeric</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后，可以在程序中使用这些略有差异的验证策略：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ValidationStrategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Validator</span><span class="params">(ValidationStrategy v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.execute(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Validator numericValidator = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsNumeric());</span><br><span class="line"><span class="keyword">boolean</span> b1 = numericValidator.validate(<span class="string">"aaaa"</span>);</span><br><span class="line">Validator lowerCaseValidator = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsAllLowerCase ());</span><br><span class="line"><span class="keyword">boolean</span> b2 = lowerCaseValidator.validate(<span class="string">"bbbb"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h4><p>ValidationStrategy是一个函数接口（除此之外，它还与Predicate<string>具有同样的函数描述）。这意味着我们不需要声明新的类实现不同的策略，通过直接传递Lambda表达式就能达到同样的目的，并且还更简洁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Validator numericValidator = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"[a-z]+"</span>));</span><br><span class="line"><span class="keyword">boolean</span> b1 = numericValidator.validate(<span class="string">"aaa"</span>);</span><br><span class="line">Validator lowerCaseValidator = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"\\d+"</span>));</span><br><span class="line"><span class="keyword">boolean</span> b2 = lowerCaseValidator.validate(<span class="string">"bbbb"</span>);</span><br></pre></td></tr></table></figure></string></p><p>正如你看到的，Lambda表达式避免了采用策略设计模式时僵化的模版代码。Lambda表达式实际上已经对部分代码（或策略）进行了封装，而这就是创建策略设计模式的初衷。</p><h2 id="2-模板方法"><a href="#2-模板方法" class="headerlink" title="2.模板方法"></a>2.模板方法</h2><p>如果需要采用某个方法的框架，同时又希望有一定的灵活度，能对它的某些部分进行改进，那么采用模板方法设计模式是比较通用的方案。换句话说，模板方法模式在你“希望使用这个算法，但是需要对其中的某些行进行改进，才能达到希望的效果”时是非常有用的。</p><p>从一个例子着手，看看这个模式是如何工作。假设需要编写一个简单的在线银行应用。通常，用户需要输入一个用户账户，之后应用才能从银行的数据库中得到用户的详细信息，最终完成一些让用户满意的操作。不同分行的在线银行应用让客户满意的方式可能还略有不同，比如给客户的账户发放红利，或者仅仅是少发送一些推广文件。你可能通过下面的抽象类方式来实现在线银行应用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineBanking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Customer c = Database.getCustomerWithId(id);</span><br><span class="line">        makeCustomerHappy(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeCustomerHappy</span><span class="params">(Customer c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>processCustomer方法搭建了在线银行算法的框架：获取客户提供的ID，然后提供服务让用户满意。不同的支行可以通过继承OnlineBanking类，对该方法提供差异化实现。</p><h4 id="使用Lambda表达式-1"><a href="#使用Lambda表达式-1" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h4><p>使用Lambda表达式同样也可以解决这些问题（创建算法框架，让具体的实现插入某些部分）。你想要插入的不同算法组建可以通过Lambda表达式或者方法引用的方式实现。</p><p>这里我们向processCustomer方法引入了第二个参数，它是一个Consumer<customer>类型的参数，与前文定义的makeCustomerHappy的特征保持一致：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id, Consumer&lt;Customer&gt; makeCustomerHappy)</span> </span>&#123;</span><br><span class="line">    Customer c = Database.getCustomerWithId(id);</span><br><span class="line">    makeCustomerHappy.accept(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></customer></p><p>现在你可以方便的通过传递Lambda表达式，直接插入不同的行为，不再需要继承OnlineBanking类了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OnlineBankingLambda().processCustomer(<span class="number">1337</span>, (Customer c) -&gt;</span><br><span class="line">    System.out.println(<span class="string">"Hello "</span> + c.getName());</span><br></pre></td></tr></table></figure></p><p>这是又一个例子，佐证了Lamba表达式能帮助你解决设计模式与生俱来的设计僵化问题。</p><p>##3.观察者模式<br>观察者模式是一种比较常见的方案，某些事件发生时（比如状态转变），如果一个对象（通常我们称之为主题）需要自动地通知其他多个对象（称为观察者），就会采用该方案。创建图形用户界面（GUI）程序时，你经常会使用该设计模式。这种情况下，你会在图形用户界面组件（比如按钮）上注册一系列的观察者。如果点击按钮，观察者就会收到通知，并随即执行某个特定的行为。但是观察者模式并不局限于图形用户界面。比如，观察者模式也适用于股票交易的情形，多个券商可能都希望对某一支股票价格（主题）的变动做出响应。图8-2通过UML图解释了观察者模式。 <em>JS中的事件响应机制</em><br><img src="../img/ObserverPattern.png"></p><p>应用到实际生活中，比如《纽约时报》《卫报》《世界报》都订阅了新闻，他们希望当接收的新闻中包含他们感兴趣的关键字时，能得到特别通知。</p><p>首先，需要一个观察者接口，它将不同的观察者聚合在一起。它仅有一个名为notify的方法，一旦接收到一条新闻，该方法就会被调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tweet)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，你可以声明不同的观察者，（比如，这里是三家不同的报纸机构），依据新闻中不同的关键字分别定义不同的行为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NYTimes</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"money"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Breaking news in NY!"</span> + tweet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guardian</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"queen"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Yet another news in London...!"</span> + tweet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeMonde</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"wine"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Today cheese, wine and news!"</span> + tweet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还遗漏了最重要的部分：Subject！让我们为它定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String tweet)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Subject使用registerObserver方法可以注册一个新的观察者，使用notifyObservers方法通知它的观察者一个新闻的到来。让我们更进一步，实现Feed类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feed</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">        observers.forEach(o -&gt; o.notify(tweet));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个非常直观的实现：Feed类在内部维护了一个观察者列表，一条新闻到达时，它就进行通知。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Feed f = <span class="keyword">new</span> Feed();</span><br><span class="line">f.registerObserver(<span class="keyword">new</span> NYTimes());</span><br><span class="line">f.registerObserver(<span class="keyword">new</span> Guardian());</span><br><span class="line">f.registerObserver(<span class="keyword">new</span> LeMonde());</span><br><span class="line">f.notifyObservers(<span class="string">"The queen said her favourite book is Java 8 in Action!"</span>);</span><br></pre></td></tr></table></figure></p><p>毫无意外，《卫报》会特别关注这条新闻！</p><h3 id="使用Lambda表达式-2"><a href="#使用Lambda表达式-2" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h3><p>Observer接口的所有实现类都提供了一个方法：notify。新闻到达时，它们都只是对同一段代码封装执行。Lambda表达式的设计初衷就是消除这样的僵化代码。使用Lambda表达式后，无需显示地实例化三个观察者对象，直接传递Lambda表达式表示需要执行的行为即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"money"</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">"Breaking news in NY! "</span> + tweet);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">f.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"queen"</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">"Yet another news in London... "</span> + tweet);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>那么，是否我们随时随地都可以使用Lambda表达式呢？答案是否定的！我们前文介绍的例子中，Lambda适配得很好，那是因为需要执行的动作都很简单，因此才能很方便地消除僵化代码。但是，观察者的逻辑有可能十分复杂，它们可能还有状态，抑或定义了多个方法，诸如此类。这种情况下，你还是应该继续使用类的方法。</p><h2 id="4-责任链模式"><a href="#4-责任链模式" class="headerlink" title="4.责任链模式"></a>4.责任链模式</h2><p>责任链模式是一种创建处理对象序列（比如操作序列）的通用方案。一个处理对象可能需要在完成一些工作之后，将结果传递给另一个对象，这个对象接着做一些工作，再转交给下一个处理对象，以此类推。（链表）<br>通常，这种模式是通过定义一个代表处理对象的抽象类来实现的，在抽象类中会定义一个字段来记录后续对象。一旦对象完成它的工作，处理对象就会将它的工作转交给它的后继。代码中，这段逻辑看起来是下面这样的：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessingObject</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ProcessingObject&lt;T&gt; successor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(ProcessingObject&lt;T&gt; successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">handle</span><span class="params">(T input)</span> </span>&#123;</span><br><span class="line">        T r = handleWork(input);</span><br><span class="line">        <span class="keyword">if</span>(successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> successor.handle(input);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title">handleWork</span><span class="params">(T input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>图以UML的方式阐释了责任链模式。<br><img src="../img/责任链设计模式.jpg"></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swagger</title>
      <link href="/2018/08/30/Swagger/"/>
      <url>/2018/08/30/Swagger/</url>
      <content type="html"><![CDATA[<p>Swagger<br><a id="more"></a><br>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前端渲染、前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系变成了API接口，API文档变成了前后端开发人员联系的纽带，swagger就是一款更好地书写API文档的框架。</p><h2 id="其他API文档工具"><a href="#其他API文档工具" class="headerlink" title="其他API文档工具"></a>其他API文档工具</h2><p>没有API文档工具之前，大家都是手写API文档的，有在confluence上写的，有在对应的项目目录下readme.md上写的。</p><p>书写API文档的工具有很多，但是能称之为“框架”的，估计只有Swagger了。<br>在此之前先介绍一款其他的API文档工具，叫rap：解放生产力，代替手写API的web工具。RAP是由阿里开发的，<a href="https://github.com/thx/RAP" target="_blank" rel="noopener">github地址</a>。当然咯，RAP不可能只有线上版本，肯定可以部署到私服上：<a href="https://github.com/thx/RAP/wiki/deploy_manual_cn" target="_blank" rel="noopener">https://github.com/thx/RAP/wiki/deploy_manual_cn</a>.</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>RAP挺好用的，但是和Swagger比起来有点轻量。下图是Swagger的生态使用图<br><!-- <img src="/img/Swagger.png"> 这个访问的是 zxandly/themes/yilia/source下的 --><br><img src="img/Swagger.png"><br>其中，红颜色的是Swagger官方推荐的。</p><h3 id="swagger-ui"><a href="#swagger-ui" class="headerlink" title="swagger-ui"></a>swagger-ui</h3><p>用来显示API文档，和RAP不同的是，它不可以编辑。</p><h3 id="swagger-editor"><a href="#swagger-editor" class="headerlink" title="swagger-editor"></a>swagger-editor</h3><p>在线编辑文档说明文件（swagger.json或swagger.yml文件）的工具，以便生态中的其他小工具（swagger-ui）等使用。编辑swagger说明文件使用的是yml语法，具体的内容可以去官网查看。</p><h3 id="各种语言版本的根据annotation或者注释生成swagger说明文档的工具"><a href="#各种语言版本的根据annotation或者注释生成swagger说明文档的工具" class="headerlink" title="各种语言版本的根据annotation或者注释生成swagger说明文档的工具"></a>各种语言版本的根据annotation或者注释生成swagger说明文档的工具</h3><p>目前最流行的做法是在代码注释中写上swagger相关的注释，然后，利用小工具生成swagger.json或者swagger.yaml文件。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>增加代码的灵活性</title>
      <link href="/2018/08/30/%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7/"/>
      <url>/2018/08/30/%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>Lambda表达式 <strong>有利于行为参数化</strong>，可以使用不同的Lambda表达式表示不同的行为，并将它们作为参数传递给函数去处理执行。这种方式<br>可以帮助我们淡定从容的面对需求的变化。比如，可以用多种方式为Predicate创建筛选条件，或者使用<br>看看有哪些模式可以应用到代码中，享受Lambda表达式带来的便利。</p><h3 id="1-采用函数接口"><a href="#1-采用函数接口" class="headerlink" title="1.采用函数接口"></a>1.采用函数接口</h3><p>首先，你必须意识到，没有函数接口，就无法使用Lambda表达式。因此，你需要在代码中引入函数接口。</p><blockquote><p>读书感悟：需要new一个函数接口对象，实现方式有new 接口实现类-&gt;new 匿名类-&gt;Lambda表达式，Lambda表达式本质上还是匿名类的简化写法。</p></blockquote><p>听起来很合理，应该在什么情况下使用它们呢？在这里介绍两种通用的模式，可以依照这两种模式重构代码，利用Lambda表达式带来的灵活性，他们分别是 <strong>有条件的延迟执行</strong> 和 <strong>环绕执行</strong>。</p><h3 id="2-有条件的延迟执行"><a href="#2-有条件的延迟执行" class="headerlink" title="2.有条件的延迟执行"></a>2.有条件的延迟执行</h3><p>我们经常看到这样的代码，控制语句被混杂在业务逻辑代码中。典型的情况包括进行安全性检查以及日志输出。比如，下面这段代码，它使用了Java语言内置的Logger类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isLoggable(Log.FINER)) &#123;</span><br><span class="line">    logger.finer(<span class="string">"Problem: "</span> + generateDiagnostic());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码有什么问题吗？其实问题不少。</p><ul><li>日志器的状态（它支持哪些日志等级）通过isLoggable方法暴露给了客户端代码。</li><li>为什么要在每次输出一条日志之前都去查询日志器对象的状态？这只能搞砸你的代码<br>更好的方案是使用log方法，该方法在输出日志消息之前，会在内部检查日志对象是否已经设置为恰当的日志等级：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.log(Level.FINER, <span class="string">"Problem: "</span> + generateDiagnostic());</span><br></pre></td></tr></table></figure></li></ul><p>这种方式更好的原因是你不再需要在代码中插入那些条件判断，与此同时日志器的状态也不再被暴露出去。不过，这段代码依旧存在一个问题。日志消息的输出与否每次都需要判断，即使你已经传递了参数，不开启日志。</p><p>这就是Lambda表达式可以施展拳脚的地方。你需要做的仅仅是延迟消息构造，如此一来，日志就只会在某些特定的情况下才开启（以此为例，当日志器的界别设置为FINER时）。显然，Java8的API设计者们已经意识到这个问题，并由此引入了一个对log方法的重载版本,这个版本的log方法接受一个Supplier作为参数。这个替代版本的log方法的函数签名如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Level level, Supplier&lt;String&gt; msgSupplier)</span></span></span><br></pre></td></tr></table></figure></p><p>你可以通过下面的方式对它进行调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.log(Level.FINER, () -&gt; <span class="string">"Problem: "</span> + generateDiagnostic());</span><br></pre></td></tr></table></figure></p><p>如果日志器的级别设置恰当，log方法会在内部执行作为参数传递进来的Lambda表达式。这里介绍的Log方法的内部实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Level level, Supplier&lt;String&gt; msgSupplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isLoggable(level)) &#123;</span><br><span class="line">        log(level, msgSupplier.get()); <span class="comment">//执行Lambda表达式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>如果你发现你需要频繁地从客户端代码去查询一个对象的状态（比如前文例子中的日志器的状态），只是为了传递参数、调用该对象的一个方法（比如输出一条日志），那么可以考虑实现一个新的方法，以Lambda或者方法表达式作为参数，新方法在检查完该对象的状态之后才调用原来的方法。你的代码会因此而变得更易读（结构更清晰），封装性更好（对象的状态也不会暴露给客户端代码了）</strong>。</p><h3 id="3-环绕执行"><a href="#3-环绕执行" class="headerlink" title="3.环绕执行"></a>3.环绕执行</h3><p>如果你发现虽然你的业务代码千差万别，但是它们拥有同样的准备和清理阶段，这时，你完全可以将这部分代码用Lambda实现。这种方式的好处是可以重用准备和清理阶段的逻辑，减少重复冗余的代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String oneLine = processFile((BufferedReader b) -&gt; b.readLine());</span><br><span class="line">String twoLines = professFile((BufferedReader b) -&gt; b.readLine() + b.readLine());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">processFile</span><span class="params">(BufferedReaderProcessor p)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"java8inaction/chap8/data.txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> p.process(br); <span class="comment">//将BufferedReaderProcessor作为执行参数传入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式的函数式接口，该接口能够抛出一个IOException</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BufferedReaderProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(BufferedReader b)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一优化是凭借函数式接口BufferedReaderProcessor达成的，通过这个接口，你可以传递各种Lambda表达式对BufferedReader对象进行处理。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从命令式的数据处理切换到Stream</title>
      <link href="/2018/08/29/%E4%BB%8E%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%87%E6%8D%A2%E5%88%B0Stream/"/>
      <url>/2018/08/29/%E4%BB%8E%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%87%E6%8D%A2%E5%88%B0Stream/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>建议将所有使用迭代器这种数据处理模式处理集合的代码都转换为Stream API的方式。为什么呢？<strong>Stream API能更清晰地表达数据处理管道的意图</strong>。除此之外，<strong>通过短路和延迟载入以及利用第7章介绍的现代计算机的多核架构</strong>，我们可以对Stream进行优化。</p><p>比如，下面的命令式代码使用了两种代码：筛选和抽取，<strong>这两种模式被混在了一起，这样的代码结构迫使程序员必须彻底搞清楚程序的每个细节才能理解代码的功能</strong>。此外，实现需要并行运行的程序所面对的困难也多得多：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; dishName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Dish dish : menu) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dish.getCalories() &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        dishNames.add(dish.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>替代方案使用Stream API，<strong>采用这种方式编写的代码读起来更像问题陈述</strong>，并行化也非常容易：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu.parallelStream()</span><br><span class="line">    .filter(d -&gt; d.getCalories &gt; <span class="number">300</span>)</span><br><span class="line">    .map(Dish::getName)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p>不幸的是，将命令式的结构代码转换为Stream API的形式是个困难的任务，因为你需要考虑控制流语句，比如break、continue、return，并选择使用恰当的流操作。好消息是已经有一些工具可以帮助我们完成这个任务。参见<a href="http://refactoring.info/tools/LambdaFicator/" target="_blank" rel="noopener">http://refactoring.info/tools/LambdaFicator/</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java程序员最常犯的10个错误</title>
      <link href="/2018/08/28/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/"/>
      <url>/2018/08/28/Java%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p><a href="http://www.importnew.com/12074.html" target="_blank" rel="noopener">原文</a><br><a href="https://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/" target="_blank" rel="noopener">英文原文</a></p><h2 id="1-将数组转化为列表"><a href="#1-将数组转化为列表" class="headerlink" title="1.将数组转化为列表"></a>1.将数组转化为列表</h2><p>将数组转化为一个列表时，程序员们经常这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure></p><p>Arrays.asList()会返回一个ArrayList对象，这里的ArrayList类是 <strong>java.util.Arrays.ArrayList，是Arrays的一个私有静态类</strong>，而不是java.util.ArrayList类，java.util.Arrays.ArrayList类有set()、get()、contains()方法，但是没有增加元素的方法，所以 <strong>它的大小是固定的</strong>，想要创建一个java.uitl.ArrayList类，应该这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.Arrays.ArrayList 类定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>ArrayList的构造方法可以接受一个集合类型，刚好它也是java.util.Arrays.ArrayList的超类</p><h2 id="2-判断一个数组是否包含一个值"><a href="#2-判断一个数组是否包含一个值" class="headerlink" title="2.判断一个数组是否包含一个值"></a>2.判断一个数组是否包含一个值</h2><p>程序员们经常这样做<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br></pre></td></tr></table></figure></p><p>这段代码起作用，但是没有必要把一个数组转化为列表，转化为列表需要额外的时间。可以像下面这样简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(arr).contains(targetValue);</span><br></pre></td></tr></table></figure></p><p>或者是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s : arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(targetValue)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></p><p>第一种方法比第二种更易读</p><h2 id="3-在一个循环中删除一个列表中的元素"><a href="#3-在一个循环中删除一个列表中的元素" class="headerlink" title="3.在一个循环中删除一个列表中的元素"></a>3.在一个循环中删除一个列表中的元素</h2><p>思考下面这一段在循环中删除多个元素的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></p><p>输出结果是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b, d]</span><br></pre></td></tr></table></figure></p><p>在这个方法中有一个严重的错误，当一个元素被删除时，列表的大小缩小并且下标变化，所以当你想要在一个循环中用下表删除多个元素的时候，它并不会正常的生效。</p><p>你也许知道再循环中正确的删除多个元素的方法是使用迭代，并且知道java中的doreach循环看起来像一个迭代器，但实际上并不是。考虑一下下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">        list.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它会抛出一个ConcurrentModificationException异常</p><p>相反下面的显示正常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    String s = iter.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">        iter.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>next()必须在remove()之前调用。在一个foreach循环中，编译器会使next()在删除元素后被调用，因此就会抛出ConcurrentModificationException异常，你也许希望看一下ArrayList.iterator()的源代码。</p><h2 id="4-Hashtable与HashMap的对比"><a href="#4-Hashtable与HashMap的对比" class="headerlink" title="4.Hashtable与HashMap的对比"></a>4.Hashtable与HashMap的对比</h2><p>就算法而言，哈希表是数据结构的一个名字。但是在java中，这个数据结构的名字是HashMap。Hashtable与HashMap的一个重要不同点是Hashtable是同步的，所以你经常不需要Hashtable，相反Hashmap经常会用到。<br>具体请看</p><ul><li><a href="http://www.importnew.com/8658.html" target="_blank" rel="noopener">HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</a></li><li><a href="https://www.programcreek.com/2013/09/top-9-questions-for-java-map/" target="_blank" rel="noopener">Top 9 questions about Map</a></li></ul><h2 id="5-在集合中使用原始类型"><a href="#5-在集合中使用原始类型" class="headerlink" title="5.在集合中使用原始类型"></a>5.在集合中使用原始类型</h2><p>在Java中原始类型与无界通配符类型很容易混合在一起，拿Set来说，Set是一个原始类型，而Set&lt;?&gt;是无界的通配符类型。<br>考虑下面使用原始类型List作为参数的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span> </span>&#123;</span><br><span class="line">    list.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    add(list, <span class="number">10</span>);</span><br><span class="line">    String s = list.get(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码会抛出一个异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String  </span><br><span class="line">    at ...</span><br></pre></td></tr></table></figure></p><p>使用原生类型结合是很危险的，这是因为原生类型集合跳过了泛型类型的检查，并且是不安全的，在Set、Set&lt;?&gt;和Set<object>中有很大不同，具体请看</object></p><ul><li><a href="https://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/" target="_blank" rel="noopener">Raw type vs. Unbounded wildcard</a></li><li><a href="https://www.programcreek.com/2011/12/java-type-erasure-mechanism-example/" target="_blank" rel="noopener">Type Erasure</a></li></ul><h2 id="6-访问级别"><a href="#6-访问级别" class="headerlink" title="6.访问级别"></a>6.访问级别</h2><p>程序员们经常使用public作为类字段的修饰符，可以很简单的通过引用得到值，但这是一个坏的设计，按照经验，<strong>分配给成员变量的访问界别应该尽可能的低</strong>。<br>具体请看 <a href="https://www.programcreek.com/2011/11/java-access-level-public-protected-private/" target="_blank" rel="noopener">public,protected,private</a></p><h2 id="7-ArrayList与LinkedList的对比"><a href="#7-ArrayList与LinkedList的对比" class="headerlink" title="7.ArrayList与LinkedList的对比"></a>7.ArrayList与LinkedList的对比</h2><p>当程序员们不知道ArrayList和LinkedList的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之间有巨大的性能差异。简而言之，如果有大量的增加删除操作并且没有很多随机访问元素的操作，应该首先LinkedList，如果刚接触它们，请看<a href="https://www.programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/" target="_blank" rel="noopener">ArrayList vs. LinkedList</a>来获得更多关于它们性能的信息</p><h2 id="8-可变与不可变"><a href="#8-可变与不可变" class="headerlink" title="8.可变与不可变"></a>8.可变与不可变</h2><p>不可变对象有许多的有点，比如简单，安全等。但是对于每一个不同的值都需要一个独立的对象，太多的对象可能会造成大量的垃圾回收。当选择可变与不可变时应该有一个平衡。<br><strong>一般的，可变对象用来避免产生大量的中间中对象</strong>。一个经典的例子是连接大量的字符串。如果你使用一个不可变的字符串，你会产生很多需要进行垃圾回收的对象。这很浪费CPU的时间，使用可变对象是正确的解决方案（比如StringBuilder）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">    result += s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有时在某些情况下也是需要可变对象的，比如将可变对象作为参数传入方法，不使用很多语句便可以得到多个结果。另外一个例子是排序和过滤；当然，你可以写一个方法来接收原始的集合，并且返回一个排好序的集合，但是这样对于大的集合就太浪费了。（来自<a href="https://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="noopener">StackOverFlow</a>）</p><h2 id="9-父类与子类构造函数"><a href="#9-父类与子类构造函数" class="headerlink" title="9.父类与子类构造函数"></a>9.父类与子类构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个编译器错误的出现是父类默认的构造方法未定义，在Java中，如果一个类没有定义构造方法，编译器会默认的为这个类添加一个无参的构造方法。如果父类中定义了构造方法，这个例子中是Super(String s)，编译器就不会添加默认的无参构造方法，这就是上面这个父类的情形。子类的构造器，不管是无参还是有参，都会调用父类的无参构造函数。因为编译器试图在子类的两个构造方法中添加Super()方法，但是父类默认的构造方法未定义，编译器就会报出这个错误信息。想要修复这个问题，可以简单的通过</p><ul><li><p>1.在父类中添加一个Super()构造方法，像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Super"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.移除父类自定义的构造方法</p></li><li>3.在子类的构造方法中调用父类的super(value)方法。<br><a href="https://www.programcreek.com/2013/04/what-are-the-frequently-asked-questions-about-constructors-in-java/" target="_blank" rel="noopener">Constructor of Super and Stub</a></li></ul><h2 id="10-使用“”还是构造函数"><a href="#10-使用“”还是构造函数" class="headerlink" title="10.使用“”还是构造函数"></a>10.使用“”还是构造函数</h2><p>有两种方法可以创建字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用字符串</span></span><br><span class="line">String x = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//使用构造器</span></span><br><span class="line">String y = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure></p><p>有什么区别呢？<br>下面的例子会给出一个快速的答案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">//true</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(a == b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>关于它们内存分配的更多信息，请参考<a href="https://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/" target="_blank" rel="noopener">Create Java String Using ” ” or Constructor?</a>。</p>]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java只使用try和finally，不使用catch的原因和场景</title>
      <link href="/2018/08/28/Java%E5%8F%AA%E4%BD%BF%E7%94%A8try%E5%92%8Cfinally%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8catch%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%9C%BA%E6%99%AF/"/>
      <url>/2018/08/28/Java%E5%8F%AA%E4%BD%BF%E7%94%A8try%E5%92%8Cfinally%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8catch%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p><a href="https://blog.csdn.net/aitangyong/article/details/38146833?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">原文地址</a></p><p>JDK开发工具包中，很多异常都使用了如下结构，如AbstractExecutorService，即只有try和finally，没有catch<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reentrant英[ri:'entrənt] 美[rɪ'entrənt] 即 en entrant 再进入，可重入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//block until condition holds</span></span><br><span class="line">        lock.lock(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//... methods body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么要使用这种结构呢？有什么好处？先看下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryAndFinally</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//NullPointerException</span></span><br><span class="line">        name.length();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传递null该方法的执行结果是：在控制台打印aa，并抛出NullPointerException。执行流程是先执行try块，出现异常后执行finally块，最后向调用者抛出try中的一场。这种执行结果是很正常的，因为没有catch异常处理器，所以该方法只能将产生的异常向外抛；因为有finally，所以会在方法返回抛出异常前，先执行finally代码块中的清理工作。</p><hr><p>这种做法的好处是什么呢？<br>对于testTryAndFinally来说，它做了自己必须要做的事（finally），并向外抛出自己无法处理的异常；对于调用者来说，能够感知出现的异常，并可以按照需要进行处理。<strong>也就是说这种结构实现了职责的分离，实现了异常处理（throw）与异常清理（finally）的解耦，让不同的方法专注于自己应该做的事。</strong>那什么时候使用try-finally,什么时候使用try-catch-finally呢？很显然这取决于方法本身是否能够处理try中出现的异常。如果自己可以处理，那么直接catch住，不用抛给方法的调用者；如果自己不知道怎么处理，就应该将异常向外抛，能够让调用者知道发生了异常。即在方法的签名中声明throws可能出现而自己又无法处理的异常，但是在方法内部做自己应该做的事情。</p><p>这可以参考ExecutorService.invokeAny()的方法签名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collecion&lt;? extends Callable&lt;T&gt; tasks)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从Lambda 表达式到方法引用的转换</title>
      <link href="/2018/08/27/%E4%BB%8ELambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/08/27/%E4%BB%8ELambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>Lambda非常适用于需要传递代码片段的场景。不过，为了改善代码的可读性，请尽量使用方法引用。<strong>因为方法名往往能更直观地表达代码的意图</strong>。比如下面这段代码，功能是按照食物的热量级别对菜肴进行分类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCaloricLevel = </span><br><span class="line">     menu.stream()</span><br><span class="line">         .collect(</span><br><span class="line">             groupingBy(dish -&gt; &#123;</span><br><span class="line">                 <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">         );</span><br></pre></td></tr></table></figure></p><p>可以将Lambda表达式的内容抽取到一个单独的方法中，将其作为参数传递给groupingBy方法。变换之后，代码变得更加简洁，程序的意图也更加清晰了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCaloricLevel = </span><br><span class="line">     menu.stream().collect(groupingBy(Dish::getCaloricLevel));</span><br></pre></td></tr></table></figure></p><p>为了实现这个方案，还需要在Dish类中添加getCaloricLevel方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; getCaloricLevel() &#123;</span><br><span class="line">        <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，应该尽量考虑使用静态辅助方法，比如comparing、maxBy。这些方法设计之初就考虑了会结合方法引用一起使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要考虑如何实现比较算法</span></span><br><span class="line">inventory.sort(</span><br><span class="line">    (Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读起来就像问题描述，非常清晰</span></span><br><span class="line">inventory.sort(comparing(Apple::getWeight));</span><br></pre></td></tr></table></figure></p><p>此外，很多通用的归约操作，比如sum、maximum,都有内建的辅助方法可以和方法引用结合使用。比如，使用Collectors接口可以轻松得到<em>和</em>或者<em>最大值</em>，与采用Lambda表达式和底层的归约操作比起来，这种方式要 <strong>直观的多</strong>。与其编写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = </span><br><span class="line">    menu.stream().map(Dish::getCalories)</span><br><span class="line">                 .reduce(<span class="number">0</span>, (c1, c2) -&gt; c1 + c2);</span><br></pre></td></tr></table></figure></p><p>不如尝试使用内置的集合类，它能更清晰地表达问题陈述是什么。下面的代码中，我们使用了集合类summingInt（方法的名词很直观地解释了它的功能）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = menu.stream().collect(summingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
            <tag> 8章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从匿名类到Lambda表达式的转换</title>
      <link href="/2018/08/27/%E4%BB%8E%E5%8C%BF%E5%90%8D%E7%B1%BB%E5%88%B0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/08/27/%E4%BB%8E%E5%8C%BF%E5%90%8D%E7%B1%BB%E5%88%B0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><p>值得尝试的第一种重构，也是简单的方式，是将实现单一抽象方法的匿名类转换为Lambda表达式。比如，创建一个Runnable对象的匿名类，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的Lambda表达式实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r2 = () -&gt; System.out.println(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p><p>但是某些情况下，将匿名类转换为Lambda表达式可能是一个比较复杂的过程。</p><ul><li>首先，匿名类和Lambda表达式中<strong>this</strong>和<strong>super</strong>的含义是不同的。在匿名类中，this代表的是<strong>类自身</strong>，但是在Lambda中，它代表的是<strong>包含类</strong>。</li><li>其次，匿名类可以屏蔽包含类的变量，而Lambda表达式不能（它们会导致编译错误），譬如下面这段代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译错误</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">Runnable r1 = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>错误信息<br><em>Error:(8, 17) java: 已在方法 main(java.lang.String[])中定义了变量 a</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一切正常</span></span><br><span class="line">Runnable r2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后，在涉及重载的上下文里，将匿名类转换为Lambda表达式可能导致最终的代码更加晦涩。实际上，匿名类的类型是在初始化时确定的，而Lambda的类型取决于它的上下文。通过下面这个例子，可以了解问题是如何发生的。假设用Runnable同样的签名声明了一个函数接口Task：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    r.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Task a)</span> </span>&#123;</span><br><span class="line">    a.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>现在，你再传递一个匿名类实现的Task，不会碰到了任何问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doSomething(<span class="keyword">new</span> Task() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Danger"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是将这种匿名类转换为Lambda表达式时，就导致了一种晦涩的方法调用，因为Runnable和Task都是合法的目标类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething(() -&gt; System.out.println(<span class="string">"Danger"</span>));</span><br></pre></td></tr></table></figure></p><p>错误信息<br><em>Error:(12, 9) java: 对doSomething的引用不明确 Test 中的方法 doSomething(java.lang.Runnable) 和 Test 中的方法 doSomething(Task) 都匹配</em></p><p>可以对Task尝试使用显式的类型转换来解决这种模棱两可的情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething((Task)() -&gt; System.out.println(<span class="string">"Danger"</span>));</span><br></pre></td></tr></table></figure></p><p>但是不要因此而放弃对Lambda的尝试。好消息是，目前大多数的集成开发环境，比如NetBeans和Intellij都支持这种重构，它们可以自动帮你检查，避免发生这些问题。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8实战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mastering_Go笔记二</title>
      <link href="/2018/08/26/Mastering-Go%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2018/08/26/Mastering-Go%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="Mastering-Go笔记二"><a href="#Mastering-Go笔记二" class="headerlink" title="Mastering_Go笔记二"></a>Mastering_Go笔记二</h2><a id="more"></a><p>本文主要通过 <code>Masting Go</code> 一书第二章学习Go语言底层知识和一些黑魔法。</p><p>Go语言指针，不能随意转换类型:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value <span class="keyword">int64</span> = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> p1 = &amp;value</span><br><span class="line">    <span class="keyword">var</span> p2 = (*<span class="keyword">int32</span>)(unsafe.Pointer(p1))  <span class="comment">// a 32-bit pointer cannot store a 64-bit integer</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"*p1: "</span>, *p1)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line"></span><br><span class="line">    *p1 = <span class="number">5434123412312431212</span></span><br><span class="line">    fmt.Println(value)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line">    *p1 = <span class="number">54341234</span></span><br><span class="line">    fmt.Println(value)</span><br><span class="line">    fmt.Println(<span class="string">"*p2: "</span>, *p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>go tool compile</code> 可以把源码编译为目标代码 使用 <code>-pack</code> 归档, <code>-race</code> 检测是否有竞态条件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go tool compile -race -pack unsafe.go &amp;&amp; file ./unsafe.a</span><br><span class="line">./unsafe.a: current ar archive</span><br><span class="line"></span><br><span class="line">λ ar -t unsafe.a</span><br><span class="line">__.PKGDEF</span><br><span class="line">_go_.o</span><br></pre></td></tr></table></figure><p>使用 <code>go tool compile -S temp.go</code> 可以得到很多的类似汇编语言的代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">λ <span class="keyword">go</span> tool compile -S temp.<span class="keyword">go</span> </span><br><span class="line"><span class="string">""</span>.main STEXT size=<span class="number">110</span> args=<span class="number">0x0</span> locals=<span class="number">0x48</span></span><br><span class="line">    <span class="number">0x0000</span> <span class="number">00000</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    TEXT    <span class="string">""</span>.main(SB), $<span class="number">72</span><span class="number">-0</span></span><br><span class="line">    <span class="number">0x0000</span> <span class="number">00000</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    MOVQ    (TLS), CX</span><br><span class="line">    <span class="number">0x0009</span> <span class="number">00009</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    CMPQ    SP, <span class="number">16</span>(CX)</span><br><span class="line">    <span class="number">0x000d</span> <span class="number">00013</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    JLS <span class="number">103</span></span><br><span class="line">    <span class="number">0x000f</span> <span class="number">00015</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    SUBQ    $<span class="number">72</span>, SP</span><br><span class="line">    <span class="number">0x0013</span> <span class="number">00019</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    MOVQ    BP, <span class="number">64</span>(SP)</span><br><span class="line">    <span class="number">0x0018</span> <span class="number">00024</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    LEAQ    <span class="number">64</span>(SP), BP</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    FUNCDATA    $<span class="number">0</span>, gclocals·<span class="number">69</span>c1753bd5f81501d95132d08af04464(SB)</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">9</span>)    FUNCDATA    $<span class="number">1</span>, gclocals·e226d4ae4a7cad8835311c6a4683c14f(SB)</span><br><span class="line">    <span class="number">0x001d</span> <span class="number">00029</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   XORPS   X0, X0</span><br><span class="line">    <span class="number">0x0020</span> <span class="number">00032</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   MOVUPS  X0, <span class="string">""</span>..autotmp_0+<span class="number">48</span>(SP)</span><br><span class="line">    <span class="number">0x0025</span> <span class="number">00037</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   LEAQ    <span class="keyword">type</span>.<span class="keyword">string</span>(SB), AX</span><br><span class="line">    <span class="number">0x002c</span> <span class="number">00044</span> (temp.<span class="keyword">go</span>:<span class="number">10</span>)   MOVQ    AX, <span class="string">""</span>..autotmp_0+<span class="number">48</span>(SP)</span><br></pre></td></tr></table></figure><p>Go语言GC是和进程一起运行的，用来释放不再需要的内存资源，使用以下代码查看内存使用和GC次数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMemStats</span><span class="params">(mem runtime.MemStats)</span></span> &#123;</span><br><span class="line">    runtime.ReadMemStats(&amp;mem)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"mem.Alloc:"</span>, mem.Alloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.TotalAlloc:"</span>, mem.TotalAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.HeapAlloc:"</span>, mem.HeapAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.NumGC:"</span>, mem.NumGC)</span><br><span class="line">    fmt.Println(<span class="string">"-----"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mem runtime.MemStats</span><br><span class="line">    printMemStats(mem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">50000000</span>)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Operation failed!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">        printMemStats(mem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMemStats(mem)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mem.Alloc: 67336</span><br><span class="line">mem.TotalAlloc: 67336</span><br><span class="line">mem.HeapAlloc: 67336</span><br><span class="line">mem.NumGC: 0</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 70792</span><br><span class="line">mem.TotalAlloc: 50077928</span><br><span class="line">mem.HeapAlloc: 70792</span><br><span class="line">mem.NumGC: 1</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71120</span><br><span class="line">mem.TotalAlloc: 100083080</span><br><span class="line">mem.HeapAlloc: 71120</span><br><span class="line">mem.NumGC: 2</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71576</span><br><span class="line">mem.TotalAlloc: 150088296</span><br><span class="line">mem.HeapAlloc: 71576</span><br><span class="line">mem.NumGC: 3</span><br><span class="line">-----</span><br><span class="line">mem.Alloc: 71576</span><br><span class="line">mem.TotalAlloc: 200093056</span><br><span class="line">mem.HeapAlloc: 71576</span><br><span class="line">mem.NumGC: 4</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>GODEBUG=gctrace=1 go run temp.go</code> 可以看到GC过程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">λ GODEBUG=gctrace=1 go run temp.go</span><br><span class="line">gc 1 @0.141s 0%: 0.017+0.67+0.066 ms clock, 0.068+0.23/0.51/0.91+0.26 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 2 @0.279s 0%: 0.008+0.50+0.032 ms clock, 0.033+0.40/0.36/0.93+0.12 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 3 @0.449s 0%: 0.077+1.6+0.15 ms clock, 0.30+0.40/1.5/0.36+0.60 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 4 @0.457s 0%: 0.005+1.1+0.055 ms clock, 0.022+0.30/0.87/0.72+0.22 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 5 @0.488s 0%: 0.008+1.9+0.10 ms clock, 0.034+0.16/1.7/0.62+0.42 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 6 @0.511s 0%: 0.006+0.71+0.033 ms clock, 0.026+0.30/0.56/1.3+0.13 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">gc 1 @0.026s 0%: 0.020+4.2+0.11 ms clock, 0.080+1.1/3.6/4.7+0.47 ms cpu, 4-&gt;4-&gt;3 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">gc 1 @0.003s 0%: 0.025+20+0.24 ms clock, 0.10+2.3/1.8/0.31+0.98 ms cpu, 4-&gt;5-&gt;5 MB, 5 MB goal, 4 P</span><br><span class="line">gc 2 @0.036s 0%: 0.007+6.6+0.065 ms clock, 0.031+0.12/6.4/0.60+0.26 ms cpu, 7-&gt;8-&gt;8 MB, 10 MB goal, 4 P</span><br><span class="line">gc 3 @0.073s 0%: 0.014+7.7+0.047 ms clock, 0.059+0.15/7.2/11+0.18 ms cpu, 13-&gt;14-&gt;13 MB, 16 MB goal, 4 P</span><br><span class="line">gc 4 @0.159s 0%: 0.010+31+0.10 ms clock, 0.041+1.0/28/0.81+0.42 ms cpu, 24-&gt;26-&gt;24 MB, 26 MB goal, 4 P</span><br><span class="line">mem.Alloc: 67496</span><br><span class="line">mem.TotalAlloc: 67496</span><br><span class="line">mem.HeapAlloc: 67496</span><br><span class="line">mem.NumGC: 0</span><br><span class="line">-----</span><br><span class="line">gc 1 @0.003s 0%: 0.008+0.13+0.15 ms clock, 0.032+0.081/0/0.19+0.63 ms cpu, 47-&gt;47-&gt;0 MB, 48 MB goal, 4 P</span><br><span class="line">mem.Alloc: 68968</span><br><span class="line">mem.TotalAlloc: 50076296</span><br><span class="line">mem.HeapAlloc: 68968</span><br><span class="line">mem.NumGC: 1</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>三色算法简介:</p><p>三色算法原理是把对象分为三个集合，黑白灰三个颜色，每个对象只能属于一个集合。</p><blockquote><p>The objects of the black set are<br>guaranteed to have no pointers to any object of the white set. However, an object in the<br>white set can have a pointer to an object of the black set, because this has no effect on the<br>operation of the garbage collector! The objects of the grey set might have pointers to some<br>objects of the white set. Also, the objects of the white set are candidates for garbage<br>collection.</p></blockquote><p>黑色集合的对象保证不会指向白色集合对象。白色集合的对象可以指向黑色集合（从黑色集合引用的），因为对GC没有影响。<br>灰色集合的对象可以被白色集合里对象引用。白色集合里的对象就是GC的候选对象。也就是说，白色集合里的都是引用别人的，<br>黑色集合里的不会引用白色集合的，灰色集合里的可以被白色集合里的引用。</p><blockquote><p>Note that no object can go directly from the black set to the white set, which allows the<br>algorithm to operate and be able to clear the objects in the white set. Additionally, no object<br>of the black set can directly point to an object of the white set.</p></blockquote><blockquote><p>When the garbage collection begins, all objects are white and the garbage collector visits all<br>of the root objects and colors them grey. The roots are the objects that can be directly<br>accessed by the application, which includes global variables and other things on the stack.<br>After this, the garbage<br>collector picks a grey object, makes it black, and starts searching to determine if that object<br>has pointers to other objects of the white set. This means that when a grey object is being<br>scanned for pointers to other objects, it is colored black. If that scan discovers that this<br>particular object has one or more pointers to a white object, it puts that white object in the<br>grey set. This process keeps going for as long as objects exist in the grey set. After that, the<br>objects in the white set are unreachable and their memory space can be reused. Therefore, at<br>this point, the elements of the white set are said to be garbage collected.</p></blockquote><p>GC开始时，所有对象都放白色集合里，然后垃圾回收器会遍历所有根对象并把他们标记灰色。跟节点对象是可以直接被应用访问的，<br>包括全局变量和栈上的对象。</p><p>Go的GC也能用在 <code>channel</code> 上:</p><blockquote><p>The Go garbage collection can also be applied to variables such as channels! When the<br>garbage collector finds out that a channel is unreachable and that the channel variable can<br>no longer be accessed, it will free its resources even if the channel has not been closed!</p></blockquote><p>Go语言允许手动GC, 但是 <code>runtime.GC()</code> 的调用是同步的，会阻塞整个进程:</p><blockquote><p>Go allows you to initiate a garbage collection manually by putting a runtime.GC()<br>statement in your Go code. However, keep in mind that runtime.GC() will block the<br>caller, and it might block the entire program, especially if you are running a very busy Go<br>program with many objects. </p></blockquote><p>另一个使用 <code>unsafe</code> 的例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    pointer := &amp;array[<span class="number">0</span>]</span><br><span class="line">    fmt.Print(*pointer, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    memaddr := <span class="keyword">uintptr</span>(unsafe.Pointer(pointer)) + unsafe.Sizeof(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 也可以越界访问</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line">        pointer = (*<span class="keyword">int</span>)(unsafe.Pointer(memaddr))</span><br><span class="line">        fmt.Print(*pointer, <span class="string">"\n"</span>)</span><br><span class="line">        memaddr = <span class="keyword">uintptr</span>(unsafe.Pointer(pointer)) + unsafe.Sizeof(array[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言内联C语言实例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//必须不留空行</span></span><br><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">// void callC() &#123;</span></span><br><span class="line"><span class="comment">//   int i;</span></span><br><span class="line"><span class="comment">//   for (i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//     printf("Calling C code!\n");</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   exit(0); // 如果C代码退出的话，Go进程也会退出</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A Go statement!"</span>)</span><br><span class="line">    C.callC()</span><br><span class="line">    fmt.Println(<span class="string">"Nerver execute statement!"</span>)  <span class="comment">//这句不会执行了 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Go语言调用C语言，多个文件实例:</p><p>hello/hello.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cHello</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">char</span>* message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>hello/hello.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello from C!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Go send me %s\n"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hello1.go 和 hello 文件夹在一个目录下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// #cgo CFLAGS: -I$&#123;SRCDIR&#125;/hellolib</span></span><br><span class="line"><span class="comment">// #cgo LDFLAGS: $&#123;SRCDIR&#125;/hello.a</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">// #include "hello.h" // hello.h 文件需要和 hello1.go放在一个文件夹下面，需要把hello.h复制出来</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Going to call a C function!"</span>)</span><br><span class="line">    C.cHello()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Going to call another C function!"</span>)</span><br><span class="line">    <span class="comment">// CString 是给C的参数必备的</span></span><br><span class="line">    myMessage := C.CString(<span class="string">"This is Mihalis!"</span>)</span><br><span class="line">    <span class="keyword">defer</span> C.free(unsafe.Pointer(myMessage))</span><br><span class="line">    C.printMessage(myMessage)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"All perfectly done!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并打包 hello 的静态库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ gcc -c hello/*.c</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ ar rs hello.a hello.o</span><br><span class="line">ar: creating archive helloC.a</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ file hello.a</span><br><span class="line">helloC.a: current ar archive random library</span><br></pre></td></tr></table></figure><p>构建 <code>hello1.go</code> 并运行 hello1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo λ go build hello1.go</span><br><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo λ ./hello1 </span><br><span class="line">Going to call a C function!</span><br><span class="line">Hello from C!</span><br><span class="line">Going to call another C function!</span><br><span class="line">Go send me This is Mihalis!</span><br><span class="line">All perfectly done!</span><br></pre></td></tr></table></figure><p>从C语言调用Go的函数:</p><blockquote><p>The Go package<br>will be converted into a C shared library that will be used in the C program.</p></blockquote><p>把Go语言的包转为C语言的共享库，然后被C语言调用。</p><p>usedByC.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export PrintMessage</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintMessage</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A Go function!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export Multiply</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Multiply</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> build -o usedByC.o -buildmode=c-shared usedByC.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">$ ll</span><br><span class="line">总用量 <span class="number">2.3</span>M</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant  <span class="number">214</span> <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.<span class="keyword">go</span></span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant <span class="number">1.4</span>K <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.h</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant <span class="number">2.3</span>M <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">12</span> usedByC.o</span><br><span class="line">-rwxrwxr-x <span class="number">1</span> vagrant vagrant <span class="number">7.2</span>K <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">13</span> willusego</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> vagrant vagrant  <span class="number">332</span> <span class="number">8</span>月  <span class="number">24</span> <span class="number">13</span>:<span class="number">13</span> willusego.c</span><br></pre></td></tr></table></figure><p>C语言调用文件:</p><p>willusego.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usedByC.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    GoInt x = <span class="number">12</span>;</span><br><span class="line">    GoInt y = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"About to call a Go function!\n"</span>);</span><br><span class="line">    PrintMessage();</span><br><span class="line"></span><br><span class="line">    GoInt sum = Multiply(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Multiply of %d %d is %d \n"</span>, (<span class="keyword">int</span>)x, (<span class="keyword">int</span>)y, (<span class="keyword">int</span>)sum);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译C语言代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o willusego willusego.c ./usedByC.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># vagrant @ chenwen in ~/temp [13:16:12] </span></span><br><span class="line">$ ./willusego </span><br><span class="line">About to call a Go <span class="keyword">function</span>!</span><br><span class="line">A Go <span class="keyword">function</span>!</span><br><span class="line">Multiply of 12 22 is 264</span><br></pre></td></tr></table></figure><p>练习1:</p><blockquote><p>Write a Go function, and use it in a C program.</p></blockquote><p>以这个问题为例: <a href="https://leetcode.com/problems/length-of-last-word/description/" target="_blank" rel="noopener">https://leetcode.com/problems/length-of-last-word/description/</a></p><p>用C语言写可能比较麻烦，那么用Go写完，让C语言调用它:</p><p>usedByC.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export LengthOfLastWord</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LengthOfLastWord</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    words := strings.Split(strings.TrimSpace(s), <span class="string">" "</span>)</span><br><span class="line">    length := <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(words[length - <span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leeyang in ~/Downloads/阅读计划/MasteringGo/temp λ <span class="keyword">go</span> build -o usedByC.o -buildmode=c-shared usedByC.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>willusego.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usedByC.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cvalue[] = <span class="string">"Hello This is a C Application"</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(cvalue);</span><br><span class="line"></span><br><span class="line">    GoString value = &#123;cvalue, length&#125;;  <span class="comment">//go中的字符串类型在c中为GoString</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max length word length is %d\n"</span>, (<span class="keyword">int</span>)LengthOfLastWord(value));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo/temp λ gcc -o willusego willusego.c  ./usedByC.o           </span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo/temp λ ./willusego </span><br><span class="line">max length word length is 11</span><br></pre></td></tr></table></figure><p><code>defer</code> 关键字</p><blockquote><p>The defer keyword postpones the execution of a function until the surrounding function<br>returns. It is widely used in file input and output operations because it saves you from<br>having to remember when to close an opened file: the defer keyword allows you to put the<br>function call that closes an opened file near to the function call that opened it.</p></blockquote><blockquote><p>It is very important to remember that deferred functions are executed in Last In First Out<br>(LIFO) order after the return of the surrounding function. Put simply, this means that if you<br>defer function f1() first, function f2() second, and function f3() third in the same<br>surrounding function, when the surrounding function is about to return, function f3() will<br>be executed first, function f2() will be executed second, and function f1() will be the last<br>one to get executed.</p></blockquote><p><code>defer</code> 的语句多数用于资源管理，在函数返回前执行，和栈类似，先进后出，最后放进去的先执行。</p><p>实例代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 从  3 - 0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Print(<span class="string">"f1:"</span>, i, <span class="string">" "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// defer 一个无参数的匿名函数, 相当于一个空循环 最后执行defer时候 i=4</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                fmt.Print(<span class="string">"f2:"</span>, i, <span class="string">" "</span>)</span><br><span class="line">            &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 有参数的匿名函数 结果正常 从 1 - 4</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">4</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Print(<span class="string">"f3:"</span>, n, <span class="string">" "</span>)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    fmt.Println()</span><br><span class="line">    f3()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Panic and Recover 关键字</p><p>说明:</p><blockquote><p>Strictly speaking, panic() is a built-in Go function that terminates the current flow of a Go<br>program and starts panicking! On the other hand, the recover() function, which is also a<br>built-in Go function, allows you to take back the control of a goroutine that just panicked<br>using panic().</p></blockquote><p>只有 <code>panic</code> 语句,会让程序直接退出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"I have to leave."</span>)</span><br><span class="line">    fmt.Println(<span class="string">"never execute here!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">λ go run temp.go        </span><br><span class="line">panic: I have to leave.</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">    /Users/leeyang/Downloads/阅读计划/MasteringGo/temp.go:8 +0x39</span><br><span class="line"><span class="built_in">exit</span> status 2</span><br><span class="line">leeyang <span class="keyword">in</span> ~/Downloads/阅读计划/MasteringGo λ</span><br></pre></td></tr></table></figure><p><code>panic</code> 和 <code>recover</code> 一起使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Inside a()"</span>)</span><br><span class="line">    <span class="comment">// 相当于捕获了 b 抛出的异常</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> c := <span class="built_in">recover</span>(); c != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Recover inside a()!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"About to call b()"</span>)</span><br><span class="line">    b()</span><br><span class="line">    fmt.Println(<span class="string">"b() exited!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Exiting a()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Inside b()"</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Panic in b()!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Exiting b()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a()</span><br><span class="line">    fmt.Println(<span class="string">"main exit."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strace -c</code> 可以统计每个系统调用的次数等:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ strace -c ls</span><br><span class="line">usedByC.go  usedByC.h  usedByC.o  willusego  willusego.c</span><br><span class="line">% time     seconds  usecs/call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line"> 50.00    0.000022           2        12           open</span><br><span class="line"> 50.00    0.000022           1        16           mprotect</span><br><span class="line">  0.00    0.000000           0        10           <span class="built_in">read</span></span><br><span class="line">  0.00    0.000000           0         1           write</span><br><span class="line">  0.00    0.000000           0        14           close</span><br><span class="line">  0.00    0.000000           0        12           fstat</span><br><span class="line">  0.00    0.000000           0        28           mmap</span><br><span class="line">  0.00    0.000000           0         3           munmap</span><br><span class="line">  0.00    0.000000           0         3           brk</span><br><span class="line">  0.00    0.000000           0         2           rt_sigaction</span><br><span class="line">  0.00    0.000000           0         1           rt_sigprocmask</span><br><span class="line">  0.00    0.000000           0         2           ioctl</span><br><span class="line">  0.00    0.000000           0         1         1 access</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           fcntl</span><br><span class="line">  0.00    0.000000           0         2           getdents</span><br><span class="line">  0.00    0.000000           0         1           getrlimit</span><br><span class="line">  0.00    0.000000           0         1           statfs</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">  0.00    0.000000           0         2         1 futex</span><br><span class="line">  0.00    0.000000           0         1           set_tid_address</span><br><span class="line">  0.00    0.000000           0         1           set_robust_list</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000044                   116         2 total</span><br></pre></td></tr></table></figure><p><code>runtime</code> 包获取系统相关信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">"You are using "</span>, runtime.Compiler, <span class="string">" "</span>)</span><br><span class="line">    fmt.Println(<span class="string">"on a"</span>, runtime.GOARCH, <span class="string">"machine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Using Go version"</span>, runtime.Version())</span><br><span class="line">    fmt.Println(<span class="string">"Number of CPUs:"</span>, runtime.NumCPU())</span><br><span class="line">    fmt.Println(<span class="string">"Number of Goroutines:"</span>, runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go</span><br><span class="line">You are using gc on a amd64 machine</span><br><span class="line">Using Go version go1.10.3</span><br><span class="line">Number of CPUs: 4</span><br><span class="line">Number of Goroutines: 1</span><br></pre></td></tr></table></figure><p><code>Node Trees</code> 简介:</p><blockquote><p>A Go node is a struct with a large number of properties.Everything in a<br>Go program is being parsed and analyzed by the modules of the Go compiler according to<br>the grammar of the Go programming language. The final product of this analysis is a tree<br>that is specific to the provided Go code, and it represents the program in a different way<br>that is suited for the compiler rather than for the developer.</p></blockquote><p>使用 <code>$ go tool compile -W temp.go</code> 可以得到很多关于node的属性</p><p>使用这个工具可以对代码进行一些分析:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> λ go tool compile -W temp.go | grep functionOne</span><br><span class="line">before functionOne</span><br><span class="line">after walk functionOne</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br><span class="line">.   .   NAME-main.functionOne a(<span class="literal">true</span>) l(7) x(0) class(PFUNC) tc(1) used FUNC-func(int)</span><br></pre></td></tr></table></figure><p><code>runtime.Breakpoint</code> 可以加断点:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionOne</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    varOne := <span class="number">7788</span></span><br><span class="line">    varTwo := <span class="number">6699</span></span><br><span class="line">    fmt.Println(<span class="string">"Hello there!"</span>)</span><br><span class="line">    runtime.Breakpoint()</span><br><span class="line">    functionOne(varOne)</span><br><span class="line">    functionOne(varTwo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://karthikkaranth.me/blog/calling-c-code-from-go/" target="_blank" rel="noopener">https://karthikkaranth.me/blog/calling-c-code-from-go/</a><br><a href="https://tonybai.com/2012/09/26/interoperability-between-go-and-c/" target="_blank" rel="noopener">https://tonybai.com/2012/09/26/interoperability-between-go-and-c/</a><br><a href="http://bastengao.com/blog/2017/12/go-cgo-c.html" target="_blank" rel="noopener">http://bastengao.com/blog/2017/12/go-cgo-c.html</a><br><a href="http://fallthrough.io/blog/" target="_blank" rel="noopener">http://fallthrough.io/blog/</a><br><a href="https://www.cnblogs.com/magicsoar/p/7002467.html" target="_blank" rel="noopener">https://www.cnblogs.com/magicsoar/p/7002467.html</a><br><a href="https://golang.org/pkg/runtime/" target="_blank" rel="noopener">https://golang.org/pkg/runtime/</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言安装第三方包问题 and gore 使用</title>
      <link href="/2018/08/22/Go%E8%AF%AD%E8%A8%80%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E9%97%AE%E9%A2%98-and-gore-%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/22/Go%E8%AF%AD%E8%A8%80%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E9%97%AE%E9%A2%98-and-gore-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Go语言安装第三方包问题-and-gore-使用"><a href="#Go语言安装第三方包问题-and-gore-使用" class="headerlink" title="Go语言安装第三方包问题 and gore 使用"></a>Go语言安装第三方包问题 and gore 使用</h2><a id="more"></a><p>Go语言安装第三方包问题 and gore 使用</p><p><code>go get</code> 感觉类似于 <code>pip</code> 可以方便的安装各种库。</p><p>Go语言默认没有提供REPL环境，对初学者不是很方便。</p><p>我需要安装一个 Go 的 REPL 环境 <a href="https://github.com/motemen/gore" target="_blank" rel="noopener">gore</a>, 遇到一个问题,</p><p>网络问题导致的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fetching https://golang.org/x/tools/go/ast/astutil?go-get=1</span><br><span class="line">https fetch failed: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 64.233.162.84:443: i/o timeout</span><br><span class="line">package golang.org/x/tools/go/ast/astutil: unrecognized import path &quot;golang.org/x/tools/go/ast/astutil&quot; (https fetch: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 64.233.162.84:443: i/o timeout)</span><br></pre></td></tr></table></figure><p>如何解决?</p><p>类似于 Python 把源码下载下来安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/golang.org/tools/</span><br><span class="line">cd $GOPATH/src/golang.org/tools/</span><br><span class="line">git clone https://github.com/golang/tools.git tools</span><br></pre></td></tr></table></figure><p>然后再使用 <code>go get</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">λ go get -v github.com/motemen/gore</span><br><span class="line"></span><br><span class="line">github.com/mattn/go-runewidth</span><br><span class="line">github.com/mitchellh/go-homedir</span><br><span class="line">golang.org/x/tools/go/ast/astutil</span><br><span class="line">github.com/motemen/gore/gocode</span><br><span class="line">golang.org/x/tools/internal/fastwalk</span><br><span class="line">github.com/peterh/liner</span><br><span class="line">github.com/motemen/go-quickfix</span><br><span class="line">golang.org/x/tools/imports</span><br><span class="line">github.com/motemen/gore</span><br></pre></td></tr></table></figure><p>对于 <code>gore</code> 使用, 先配置一个 <code>alias</code>:</p><p><code>.zshrc</code> 加入一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias goo=&quot;/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore&quot;</span><br></pre></td></tr></table></figure><p><code>source</code> 一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><p>使用 <code>goo</code> 进入 <code>gore</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">λ goo     </span><br><span class="line">gore version 0.3.0  :help for help</span><br><span class="line">gore&gt; :import os</span><br><span class="line">gore&gt; :doc os</span><br><span class="line">use &apos;godoc cmd/os&apos; for documentation on the os command </span><br><span class="line"></span><br><span class="line">PACKAGE DOCUMENTATION</span><br><span class="line"></span><br><span class="line">package os</span><br><span class="line">    import &quot;os&quot;</span><br><span class="line"></span><br><span class="line">    Package os provides a platform-independent interface to operating system</span><br><span class="line">    functionality. The design is Unix-like, although the error handling is</span><br><span class="line">    Go-like; failing calls return values of type error rather than error</span><br><span class="line">    numbers. Often, more information is available within the error. For</span><br><span class="line">    example, if a call that takes a file name fails, such as Open or Stat,</span><br><span class="line">    the error will include the failing file name when printed and will be of</span><br><span class="line">    type *PathError, which may be unpacked for more information.</span><br><span class="line"></span><br><span class="line">    The os interface is intended to be uniform across all operating systems.</span><br><span class="line">    Features not generally available appear in the system-specific package</span><br><span class="line">    syscall.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">gore&gt; alist := os.Environ()</span><br><span class="line">[]string&#123;&quot;TERM_PROGRAM=Apple_Terminal&quot;, &quot;SHELL=/bin/zsh&quot;, &quot;TERM=xterm-256color&quot;, &quot;TMPDIR=/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/&quot;, &quot;Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHsE3Wj8NL/Render&quot;, &quot;TERM_PROGRAM_VERSION=343.7&quot;, &quot;TERM_SESSION_ID=B6E4BDF5-EB0D-4135-8750-BACC53EA7516&quot;, &quot;USER=leeyang&quot;, &quot;SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.pVg6UGIini/Listeners&quot;, &quot;__CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34&quot;, &quot;PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin&quot;, &quot;PWD=/Users/leeyang&quot;, &quot;LANG=zh_CN.UTF-8&quot;, &quot;XPC_FLAGS=0x0&quot;, &quot;XPC_SERVICE_NAME=0&quot;, &quot;SHLVL=1&quot;, &quot;HOME=/Users/leeyang&quot;, &quot;LOGNAME=leeyang&quot;, &quot;DISPLAY=/private/tmp/com.apple.launchd.82drrxSY7W/org.macosforge.xquartz:0&quot;, &quot;OLDPWD=/Users/leeyang/Desktop&quot;, &quot;ZSH=/Users/leeyang/.oh-my-zsh&quot;, &quot;PAGER=less&quot;, &quot;LESS=-R&quot;, &quot;LC_CTYPE=zh_CN.UTF-8&quot;, &quot;LSCOLORS=Gxfxcxdxbxegedabagacad&quot;, &quot;vcs_info_msg_0_=&quot;, &quot;vcs_info_msg_1_=&quot;, &quot;_=/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore&quot;&#125;</span><br><span class="line"></span><br><span class="line">gore&gt; for index, s := range alist &#123;</span><br><span class="line">.....     fmt.Println(index, s)</span><br><span class="line">..... &#125;</span><br><span class="line"></span><br><span class="line">0 TERM_PROGRAM=Apple_Terminal</span><br><span class="line">1 SHELL=/bin/zsh</span><br><span class="line">2 TERM=xterm-256color</span><br><span class="line">3 TMPDIR=/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/</span><br><span class="line">4 Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.IHsE3Wj8NL/Render</span><br><span class="line">5 TERM_PROGRAM_VERSION=343.7</span><br><span class="line">6 TERM_SESSION_ID=B6E4BDF5-EB0D-4135-8750-BACC53EA7516</span><br><span class="line">7 USER=leeyang</span><br><span class="line">8 SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.pVg6UGIini/Listeners</span><br><span class="line">9 __CF_USER_TEXT_ENCODING=0x1F5:0x19:0x34</span><br><span class="line">10 PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin</span><br><span class="line">11 PWD=/Users/leeyang</span><br><span class="line">12 LANG=zh_CN.UTF-8</span><br><span class="line">13 XPC_FLAGS=0x0</span><br><span class="line">14 XPC_SERVICE_NAME=0</span><br><span class="line">15 SHLVL=1</span><br><span class="line">16 HOME=/Users/leeyang</span><br><span class="line">17 LOGNAME=leeyang</span><br><span class="line">18 DISPLAY=/private/tmp/com.apple.launchd.82drrxSY7W/org.macosforge.xquartz:0</span><br><span class="line">19 OLDPWD=/Users/leeyang/Desktop</span><br><span class="line">20 ZSH=/Users/leeyang/.oh-my-zsh</span><br><span class="line">21 PAGER=less</span><br><span class="line">22 LESS=-R</span><br><span class="line">23 LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">24 LSCOLORS=Gxfxcxdxbxegedabagacad</span><br><span class="line">25 vcs_info_msg_0_=</span><br><span class="line">26 vcs_info_msg_1_=</span><br><span class="line">27 _=/Users/leeyang/Downloads/阅读计划/MasteringGo/bin/gore</span><br><span class="line"></span><br><span class="line">gore&gt; :print</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func __gore_p(xx ...interface&#123;&#125;) &#123;</span><br><span class="line">    for _, x := range xx &#123;</span><br><span class="line">        fmt.Printf(&quot;%#v\n&quot;, x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">    alist := os.Environ()</span><br><span class="line">    for index, s := range alist &#123;</span><br><span class="line">        fmt.Println(index, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:doc name</code> 可以得到name包的文档<br><code>:print</code> 可以把输入的命令整理为代码<br><code>:write filename</code> 可以把输入的代码直接写入到filename文件中</p><p>对于安装 <code>goquery</code> 时候也有这个问题。</p><p>通过 如下方法解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ mkdir -p $GOPATH/src/golang.org/x/</span><br><span class="line">λ cd $GOPATH/src/golang.org/x/</span><br><span class="line">λ git clone https://github.com/golang/net.git net </span><br><span class="line">λ go install net</span><br></pre></td></tr></table></figure><p>需要多一步 <code>go install net</code>。</p><p>参考:<br><a href="https://blog.csdn.net/CSXIAOYAOJIANXIAN/article/details/71700736" target="_blank" rel="noopener">https://blog.csdn.net/CSXIAOYAOJIANXIAN/article/details/71700736</a><br><a href="https://github.com/motemen/gore" target="_blank" rel="noopener">https://github.com/motemen/gore</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mastering_Go笔记一</title>
      <link href="/2018/08/22/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/08/22/Mastering-Go%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="Mastering-Go笔记一"><a href="#Mastering-Go笔记一" class="headerlink" title="Mastering_Go笔记一"></a>Mastering_Go笔记一</h2><a id="more"></a><p>本文主要通过 <code>Mastering Go</code> 一书第一章学习Go语言hello world等程序代码。</p><p>查看版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version go1.10.3 darwin/amd64</span><br></pre></td></tr></table></figure><p>通过<code>godoc</code>打开本地文档:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:8001</span><br></pre></td></tr></table></figure><p>hello world:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>编译产生二进制文件并查看然后运行，最后删除二进制文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go build temp.go &amp;&amp; ./temp &amp;&amp; file ./temp &amp;&amp; rm ./temp</span><br><span class="line">Hello world!</span><br><span class="line">./temp: Mach-O 64-bit executable x86_64</span><br></pre></td></tr></table></figure><p>引入未使用的包会报错:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line"># command-line-arguments</span><br><span class="line">./temp.go:6:5: imported and not used: &quot;os&quot;</span><br></pre></td></tr></table></figure><p>可以使用下划线忽略之:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    _ <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载并使用Go包:</p><p>首先需要配置 <code>GOPATH</code> 的环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/leeyang/Downloads/阅读计划/MasteringGo</span><br></pre></td></tr></table></figure><p>然后通过<code>get</code>选项下载示例包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -v github.com/mactsouk/go/simpleGitHub</span><br></pre></td></tr></table></figure><p>此时目录下有pkg和src目录，分别存放 目标文件 <code>simpleGitHub.a</code> 和 源文件 <code>simpleGitHub.go</code></p><p>使用示例包:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fmt包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    _ <span class="string">"os"</span></span><br><span class="line">    <span class="string">"github.com/mactsouk/go/simpleGitHub"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">    fmt.Println(simpleGitHub.AddTwo(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下命令删除一个包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ  go clean -i -v -x github.com/mactsouk/go/simpleGitHub</span><br><span class="line"></span><br><span class="line">cd /Users/leeyang/Downloads/阅读计划/MasteringGo/src/github.com/mactsouk/go/simpleGitHub</span><br><span class="line">rm -f simpleGitHub.test simpleGitHub.test.exe</span><br><span class="line">rm -f /Users/leeyang/Downloads/阅读计划/MasteringGo/pkg/darwin_amd64/github.com/mactsouk/go/simpleGitHub.a</span><br></pre></td></tr></table></figure><p>插播Linux stdin, stdout, and stderr相关知识:</p><blockquote><p>Every Unix operating system has three files open all the time for its processes.</p></blockquote><p>每个进程都有三个fd, stdin, stdout 和 stderr, 比如如下的Python进程:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">while <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>lsof -p pid</code> 查看打开的fd:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">λ lsof -p 53117</span><br><span class="line"></span><br><span class="line">COMMAND   PID    USER   FD   TYPE DEVICE  SIZE/OFF     NODE NAME</span><br><span class="line">Python  53117 leeyang  cwd    DIR    1,4       272 93945067 /Users/leeyang/Downloads/阅读计划/MasteringGo</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     12744  7052532 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4   1458024  7052521 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/Python</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4    158720  7843718 /System/Library/CoreServices/Encodings/libSimplifiedChineseConverter.dylib</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     19540  7054949 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_locale.so</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4     20920  7055007 /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/time.so</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4    622960 64959807 /usr/lib/dyld</span><br><span class="line">Python  53117 leeyang  txt    REG    1,4 383981947 82222601 /private/var/run/diagnosticd/dyld_shared_cache_x86_64h</span><br><span class="line">Python  53117 leeyang    0u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br><span class="line">Python  53117 leeyang    1u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br><span class="line">Python  53117 leeyang    2u   CHR  16,12   0t93094     1387 /dev/ttys012</span><br></pre></td></tr></table></figure><p>在 Go 语言中是 以下三个:</p><p><code>os.Stdin, os.Stdout, os.Stderr</code></p><p>使用 <code>os.Stdout</code> 输出 命令行 参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arguments := os.Args</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        io.WriteString(os.Stdout, arguments[i])</span><br><span class="line">        io.WriteString(os.Stdout, <span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 1 2 3 4</span><br><span class="line">/var/folders/mv/3zlgfn696z1348830d508x_40000gn/T/go-build924171124/b001/exe/temp</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>使用 <code>os.Stdin</code> 读入 参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f *os.File</span><br><span class="line">    f = os.Stdin</span><br><span class="line">    <span class="keyword">defer</span> f.Close()  <span class="comment">// 函数之前退出前执行</span></span><br><span class="line"></span><br><span class="line">    scanner := bufio.NewScanner(f)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        fmt.Println(<span class="string">"&gt;"</span>, scanner.Text())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go        </span><br><span class="line">ll</span><br><span class="line">&gt; ll</span><br><span class="line">hello</span><br><span class="line">&gt; hello</span><br><span class="line">world</span><br><span class="line">&gt; world</span><br></pre></td></tr></table></figure><p>关于 <code>defer</code> :</p><blockquote><p>defer会按逆序执行</p></blockquote><blockquote><p>defer是Go语言提供的关键字，常用来释放资源，会在函数返回之前进行调用。如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。defer 函数调用的执行时机是外层函数设置返回值之后, 并且在即将返回之前。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> i:=<span class="number">0</span> ;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">              <span class="keyword">defer</span> fmt.Printf(<span class="string">"%d"</span>,i)</span><br><span class="line">              fmt.Println(<span class="string">"bbbbb"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         fmt.Println(<span class="string">"aaaaa"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">bbbbb</span><br><span class="line">aaaaa</span><br><span class="line">43210</span><br></pre></td></tr></table></figure><p>获取命令行中数值最值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"输入一些数值!"</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)  <span class="comment">// main()函数必须通过os.Exit()返回数值，不能直接return 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line">    min, _ := strconv.ParseFloat(arguments[<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line">    max, _ := strconv.ParseFloat(arguments[<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, _ := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; min &#123;</span><br><span class="line">            min = num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> num &gt; max &#123;</span><br><span class="line">            max = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Min:"</span>, min)</span><br><span class="line">    fmt.Println(<span class="string">"Max:"</span>, max)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 12 3 4  5 6 -100</span><br><span class="line">Min: -100</span><br><span class="line">Max: 12</span><br></pre></td></tr></table></figure><p><code>min, _ := strconv.ParseFloat(arguments[1], 64)</code> 这里如果ParseFloat函数解析失败，会返回错误<br>这里使用下划线忽略了，实际项目中，不能这么做，很危险！</p><p>关于标准输出和标准错误的重定向，其实，每个语言都一样，比如下面代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myString := <span class="string">"This is Standard outerr output"</span></span><br><span class="line">    io.WriteString(os.Stdout, <span class="string">"This is Standard Stdout output\n"</span>)</span><br><span class="line">    io.WriteString(os.Stderr, myString)</span><br><span class="line">    io.WriteString(os.Stderr, <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go </span><br><span class="line">This is Standard Stdout output</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>重定向标准输出到 黑洞 <code>/dev/null</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 1&gt; /dev/null</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>重定向标准错误到 黑洞 <code>/dev/null</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 2&gt;/dev/null</span><br><span class="line">This is Standard Stdout output</span><br></pre></td></tr></table></figure><p>重定向到文件，标准错误重定向到标准输出，再重定向到 <code>templog</code> 文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go &gt; templog 2&gt;&amp;1</span><br><span class="line">λ cat templog </span><br><span class="line"></span><br><span class="line">This is Standard Stdout output</span><br><span class="line">This is Standard outerr output</span><br></pre></td></tr></table></figure><p>记录日志到 log 中.</p><p><code>log</code> 包中主要有以下方法:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log.Printf()</span><br><span class="line">log.Print()</span><br><span class="line">log.Println()</span><br><span class="line"></span><br><span class="line">log.Fatalf()</span><br><span class="line">log.Fatalln()</span><br><span class="line"></span><br><span class="line">log.Panic()</span><br><span class="line">log.Panicln()</span><br><span class="line">log.Panicf()</span><br></pre></td></tr></table></figure><p>按照严重程度 有以下级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug, info, notice, warning, err, crit, alert, emerg</span><br></pre></td></tr></table></figure><p>插播系统服务日志相关知识 <code>syslogd</code> (macOS) 和 <code>rsyslogd</code> (Linux)</p><blockquote><p>All Unix machines have a separate server process that is responsible for receiving logging<br>data and writing it to log files.</p></blockquote><p>以Linux为例，一般 rsyslogd 配置文件在 <code>/etc/rsyslog.conf</code> </p><p>通过以下命令查看去除注释等的主要配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ grep -v &apos;^#&apos; /etc/rsyslog.conf | grep -v &apos;^$&apos; | grep -v &apos;^\$&apos;</span><br><span class="line"></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class="line">authpriv.*                                              /var/log/secure</span><br><span class="line">mail.*                                                  -/var/log/maillog</span><br><span class="line">cron.*                                                  /var/log/cron</span><br><span class="line">*.emerg                                                 *</span><br><span class="line">uucp,news.crit                                          /var/log/spooler</span><br><span class="line">local7.*                                                /var/log/boot.log</span><br><span class="line">local6.*                                                /var/log/message</span><br></pre></td></tr></table></figure><p>以下是 <code>man rsyslogd</code> 的部分说明:</p><blockquote><p>rsyslogd - reliable and extended syslogd<br>Rsyslogd  is  a  system  utility  providing  support for message logging.<br>Support of both internet and unix domain sockets enables this utility to support both local and remote logging.<br>The  main  configuration file /etc/rsyslog.conf or an alternative file, given with the -f option, is read at startup.</p></blockquote><blockquote><p>/etc/rsyslog.conf<br>  Configuration file for rsyslogd.  See rsyslog.conf(5) for exact information.<br>/dev/log<br>  The Unix domain socket to from where local syslog messages are read.<br>/var/run/rsyslogd.pid<br>  The file containing the process id of rsyslogd.<br>prefix/lib/rsyslog<br>  Default directory for rsyslogd modules. The prefix is specified during compilation (e.g. /usr/local).</p></blockquote><p>大概了解这个系统服务的主要目的是提供消息日志，并可以通过网络的方式记录日志，并了解了相关的文件。</p><p>使用代码将 message 写入 <code>/var/log/messages</code> 文件内:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    code_name = filepath.Base(os.Args[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// http://devdocs.io/go/log/syslog/index</span></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_INFO | syslog.LOG_LOCAL6, code_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">"LOG_INFO + LOG_LOCAL6: Logging in Go!"</span>)</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go</span><br><span class="line">Will you see this?</span><br><span class="line"></span><br><span class="line">Message from syslogd@chenwen at Aug 21 21:28:02 ...</span><br><span class="line"> Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/maillog</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/postfix-script[13718]: stopping the Postfix mail system</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/master[1631]: terminating on signal 15</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/postfix-script[1631]: starting the Postfix mail system</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/master[1632]: daemon started -- version 2.6.6, configuration /etc/postfix</span><br><span class="line">Aug 21 21:28:02 chenwen Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/message.log</span><br><span class="line">Aug 21 21:28:02 chenwen temp[3459]: 2018/08/21 21:28:02 LOG_INFO + LOG_LOCAL6: Logging in Go!</span><br></pre></td></tr></table></figure><p>关于 <code>log.Fatal()</code> :</p><blockquote><p>The log.Fatal() function is used when something really bad has happened,<br>and you just want to exit your program as fast as possible after reporting the bad situation. </p></blockquote><p>使用log.Fatal() 是为了程序出现严重错误时及时退出，调用之后后面的语句不会执行了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_ALERT | syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Fatal(sysLog)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面都不会执行的</span></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go </span><br><span class="line">exit status 1</span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/message.log</span><br><span class="line">Aug 21 21:28:02 chenwen temp[3459]: 2018/08/21 21:28:02 LOG_INFO + LOG_LOCAL6: Logging in Go!</span><br><span class="line"></span><br><span class="line">$ sudo more /var/log/maillog    </span><br><span class="line">Aug 21 21:16:29 chenwen postfix/postfix-script[13718]: stopping the Postfix mail system</span><br><span class="line">Aug 21 21:16:29 chenwen postfix/master[1631]: terminating on signal 15</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/postfix-script[1631]: starting the Postfix mail system</span><br><span class="line">Aug 21 21:17:02 chenwen postfix/master[1632]: daemon started -- version 2.6.6, configuration /etc/postfix</span><br><span class="line">Aug 21 21:28:02 chenwen Some program![3459]: 2018/08/21 21:28:02 LOG_MAIL: Logging in Go!</span><br><span class="line">Aug 21 21:40:59 chenwen Some program![3696]: 2018/08/21 21:40:59 &amp;&#123;17 Some program! chenwen.zooer   &#123;0 0&#125; 0xc42000c100&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>log.Panic()</code>:</p><blockquote><p>There are situations where a program will fail for good, and you want to have as much<br>information about the failure as possible. In such difficult circumstances, you might<br>consider using log.Panic()</p></blockquote><blockquote><p>The use of the log.Panic() function will add an entry to the proper log file and will immediately terminate the Go program.</p></blockquote><p>简单说，log.Panic 会提供更多底层的信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"log/syslog"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    sysLog, err := syslog.New(syslog.LOG_ALERT | syslog.LOG_MAIL, <span class="string">"Some program!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetOutput(sysLog)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Panic(sysLog)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面都不会执行的</span></span><br><span class="line">    log.Println(<span class="string">"LOG_MAIL: Logging in Go!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Will you see this?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ go run temp.go </span><br><span class="line">panic: &amp;&#123;17 Some program! chenwen.zooer   &#123;0 0&#125; 0xc4200840c0&#125;</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">log.Panic(0xc42004df50, 0x1, 0x1)</span><br><span class="line">    /usr/lib/golang/src/log/log.go:326 +0xc0</span><br><span class="line">main.main()</span><br><span class="line">    /home/vagrant/temp.go:20 +0xed</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><p>错误处理，定义自己的错误信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnError</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a == b &#123;</span><br><span class="line">        err_info := errors.New(<span class="string">"error happend in returnError()!"</span>)</span><br><span class="line">        <span class="keyword">return</span> err_info</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := returnError(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"returnError() ended normally!"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = returnError(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"returnError() ended normally!"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到错误信息</span></span><br><span class="line">    <span class="keyword">if</span> err.Error() == <span class="string">"error happend in returnError()!"</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"!!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go               </span><br><span class="line">returnError() ended normally!</span><br><span class="line">error happend in returnError()!</span><br><span class="line">!!</span><br></pre></td></tr></table></figure><p>加入错误处理的 <code>strconv.ParseFloat</code> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> err error = errors.New(<span class="string">"An error"</span>)</span><br><span class="line"></span><br><span class="line">    k := <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> n <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> k &gt;= <span class="built_in">len</span>(arguments) &#123;</span><br><span class="line">            fmt.Println(<span class="string">"None of the arguments is a float!"</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        n, err = strconv.ParseFloat(arguments[k], <span class="number">64</span>)</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    min, max := n, n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        n, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n &lt; min &#123;</span><br><span class="line">                min = n</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> n &gt; max &#123;</span><br><span class="line">                max = n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Min:"</span>, min)</span><br><span class="line">    fmt.Println(<span class="string">"Max:"</span>, max)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ go run temp.go 12 3 4 5 6  -10</span><br><span class="line">Min: -10</span><br><span class="line">Max: 12</span><br><span class="line"></span><br><span class="line">λ go run temp.go a b c          </span><br><span class="line">None of the arguments is a float!</span><br></pre></td></tr></table></figure><p>练习1:</p><blockquote><p>Write a Go program that finds the sum of all of its numeric command-line<br>arguments</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += num</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"sum of arguments is %f\n"</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2:</p><blockquote><p>Write a Go program that finds the average value of all of its float command-line<br>arguments</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Please give one or more floats."</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arguments := os.Args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">float64</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arguments); i++ &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(arguments[i], <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += num</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"sum of arguments is %f argv is %f\n"</span>, sum, sum / count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习3:</p><blockquote><p>Write a Go program that keeps reading integers until it gets the word STOP as<br>input</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//表明源文件属于main包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f *os.File</span><br><span class="line">    f = os.Stdin</span><br><span class="line">    <span class="keyword">defer</span> f.Close()  <span class="comment">// 函数之前退出前执行</span></span><br><span class="line"></span><br><span class="line">    scanner := bufio.NewScanner(f)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        num, err := strconv.ParseFloat(scanner.Text(), <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(num)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            os.Exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://golang.org/doc/" target="_blank" rel="noopener">https://golang.org/doc/</a><br><a href="https://golang.org/pkg/log/syslog/" target="_blank" rel="noopener">https://golang.org/pkg/log/syslog/</a><br><a href="https://golang.org/pkg/os" target="_blank" rel="noopener">https://golang.org/pkg/os</a><br><a href="https://golang.org/cmd/gofmt/" target="_blank" rel="noopener">https://golang.org/cmd/gofmt/</a><br><a href="https://golang.org/pkg/fmt/" target="_blank" rel="noopener">https://golang.org/pkg/fmt/</a><br><a href="https://golang.org/pkg/log/" target="_blank" rel="noopener">https://golang.org/pkg/log/</a><br><a href="https://blog.csdn.net/skh2015java/article/details/77081250" target="_blank" rel="noopener">https://blog.csdn.net/skh2015java/article/details/77081250</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GoldbachConjecture 哥德巴赫猜想</title>
      <link href="/2018/08/15/GoldbachConjecture/"/>
      <url>/2018/08/15/GoldbachConjecture/</url>
      <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3" target="_blank" rel="noopener">哥德巴赫猜想</a>#<em>任一大于2的偶数，都可表示成两个素数之和</em>#</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入一个偶数，输出这个偶数为两个素数之和的表现形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldbachConjecture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goldbachConjecture</span><span class="params">(<span class="keyword">int</span> even)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (even &lt; <span class="number">2</span> || even % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只用循环到even的一半，不然会重复输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= even / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = even - i;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i) &amp;&amp; isPrime(j)) &#123;</span><br><span class="line">                System.out.println(even + <span class="string">" = "</span> + i + <span class="string">"+"</span> +j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(number); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法&amp;题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arithmetic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode_Count_and_say</title>
      <link href="/2018/08/13/LeetCode-Count-and-say/"/>
      <url>/2018/08/13/LeetCode-Count-and-say/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode-count-and-say问题"><a href="#LeetCode-count-and-say问题" class="headerlink" title="LeetCode count and say问题"></a>LeetCode count and say问题</h2><a id="more"></a><p><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener">这个问题</a>，记得高中学习排列组合时候，有同学拿去问数学老师，说是排列组合问题，没想到被老师识破，哈哈哈。。。刚学编程时候想要实现下，但是那时候好弱，写不出来。</p><p>问题描述：</p><p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …</p><p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.</p><p>其实这个问题就是简单的模拟。</p><p>Python实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#condig=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://leetcode.com/problems/count-and-say/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(start)</span>:</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    length = len(start)</span><br><span class="line"></span><br><span class="line">    temp_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        next_one = index + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 需要将最后一个数字和它的次数存到temp</span></span><br><span class="line">        <span class="keyword">if</span> next_one &gt;= length:</span><br><span class="line">            temp = str(count) + start[index]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 计数次数，相同计数加一</span></span><br><span class="line">            <span class="keyword">if</span> start[index] == start[next_one]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 不同将当前次数和数字存入temp，加入列表，重置计数</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = str(count) + start[index]</span><br><span class="line">                temp_list.append(temp)</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将最后一个temp变量加入列表</span></span><br><span class="line">    temp_list.append(temp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(temp_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        start = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            start = get_num(start)</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C语言实现如下，就是再翻译一遍:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">next_num</span><span class="params">(<span class="keyword">char</span>* num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>, next_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> length = <span class="built_in">strlen</span>(num);</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * (length*<span class="number">2</span>));</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> tmp_res[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    next_index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (next_index &gt;= length) &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">      <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[index] == num[next_index]) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">        <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * MAX_LEN);</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">  res[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    res = next_num(res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过这样写，没有free掉malloc得到的内存，会出现内存泄漏的，所以，next_num中不使用malloc函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 5000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next_num</span><span class="params">(<span class="keyword">char</span>* num, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>, next_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> res[MAX_LEN];</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> tmp_res[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    next_index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (next_index == length) &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">      <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[index] == num[next_index]) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp_res, <span class="string">"%d%c"</span>, count, num[index]);</span><br><span class="line">        <span class="built_in">strcat</span>(res, tmp_res);</span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  num[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="built_in">strcat</span>(num, res);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(num));</span><br><span class="line">  num[<span class="built_in">strlen</span>(num)] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*) * MAX_LEN);</span><br><span class="line">  res[<span class="number">0</span>] = <span class="string">'1'</span>;</span><br><span class="line">  res[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">int</span> i, length = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    length = <span class="built_in">strlen</span>(res);</span><br><span class="line">    next_num(res, length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>Java版本实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountAndSay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String term = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            term = parseString(term);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> term;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">parseString</span><span class="params">(String term)</span> </span>&#123;</span><br><span class="line">        String[] terms = term.split(<span class="string">""</span>);</span><br><span class="line">        StringBuffer sequence = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String curInt = terms[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> curNum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; terms.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == terms.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sequence.append(curNum + curInt);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (terms[i].equals(terms[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                curNum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sequence.append(curNum + curInt);</span><br><span class="line">                curInt = terms[i + <span class="number">1</span>];</span><br><span class="line">                curNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sequence.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法&amp;题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/13/hello-world/"/>
      <url>/2018/08/13/hello-world/</url>
      <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="Take-a-desk-start-a-family-For-each-other"><a href="#Take-a-desk-start-a-family-For-each-other" class="headerlink" title="Take a desk, start a family. For each other."></a>Take a desk, start a family. For each other.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world! 你好 世界！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
